{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/common/trace-detail-chart-table.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/common/trace-detail-chart-table.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dialog-c-text {\n  white-space: pre;\n  overflow: auto;\n  font-family: monospace;\n}\n.trace-tips {\n  width: 100%;\n  text-align: center;\n  margin-top: 10px;\n}\n",{"version":3,"sources":["trace-detail-chart-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"trace-detail-chart-table.vue","sourceRoot":"src/views/components/common","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div class=\"trace-detail-chart-table\">\n    <div class=\"rk-trace-t-loading\" v-show=\"loading\">\n      <svg class=\"icon loading\">\n        <use xlink:href=\"#spinner\"></use>\n      </svg>\n    </div>\n    <TraceContainer :type=\"HeaderType\">\n      <Item v-for=\"(item, index) in tableData\" :data=\"item\" :key=\"'key' + index\" :type=\"HeaderType\" />\n      <div class=\"trace-tips\" v-if=\"!tableData.length\">{{ $t('noData') }}</div>\n    </TraceContainer>\n    <rk-sidebox :width=\"'50%'\" :show.sync=\"showDetail\" :title=\"$t('spanInfo')\">\n      <div class=\"rk-trace-detail\">\n        <h5 class=\"mb-15\">{{ $t('tags') }}.</h5>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('endpoint') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.label }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('spanType') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.type }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('component') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.component }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">Peer:</span><span class=\"g-sm-8 wba\">{{ this.currentSpan.peer || 'No Peer' }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('error') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.isError }}</span>\n        </div>\n        <div class=\"mb-10 clear\" v-for=\"i in this.currentSpan.tags\" :key=\"i.key\">\n          <span class=\"g-sm-4 grey\">{{ i.key }}:</span>\n          <span class=\"g-sm-8 wba\">\n            {{ i.value }}\n            <svg v-if=\"i.key === 'db.statement'\" class=\"icon vm grey link-hover cp ml-5\" @click=\"copy(i.value)\">\n              <use xlink:href=\"#review-list\"></use>\n            </svg>\n          </span>\n        </div>\n        <h5 class=\"mb-10\" v-if=\"this.currentSpan.logs\" v-show=\"this.currentSpan.logs.length\">{{ $t('logs') }}.</h5>\n        <div v-for=\"(i, index) in this.currentSpan.logs\" :key=\"index\">\n          <div class=\"mb-10 sm\">\n            <span class=\"mr-10\">{{ $t('time') }}:</span>\n            <span class=\"grey\">{{ i.time | dateformat }}</span>\n          </div>\n          <div class=\"mb-15 clear\" v-for=\"(_i, _index) in i.data\" :key=\"_index\">\n            <div class=\"mb-10\">\n              {{ _i.key }}:<span\n                v-if=\"_i.key === 'stack'\"\n                class=\"r rk-sidebox-magnify\"\n                @click=\"showCurrentSpanDetail(_i.key, _i.value)\"\n              >\n                <svg class=\"icon\">\n                  <use xlink:href=\"#magnify\"></use>\n                </svg>\n              </span>\n            </div>\n            <pre class=\"pl-15 mt-0 mb-0 sm oa\">{{ _i.value }}</pre>\n          </div>\n        </div>\n      </div>\n    </rk-sidebox>\n    <v-dialog width=\"90%\" />\n  </div>\n</template>\n<style lang=\"scss\">\n  .rk-tooltip-popper.trace-table-tooltip .rk-tooltip-inner {\n    max-width: 600px;\n  }\n  .trace-detail-chart-table {\n    position: relative;\n    min-height: 300px;\n    border-bottom: 1px solid #ccc;\n  }\n</style>\n\n<script lang=\"js\">\n  import copy from '@/utils/copy';\n  import Item from './trace-chart-table/trace-item';\n  import TraceContainer from './trace-chart-table/trace-container';\n  import _ from 'lodash';\n  /* eslint-disable */\n  /* tslint:disable */\n  export default {\n    components: {\n      Item,\n      TraceContainer,\n    },\n    props: ['data', 'traceId', 'showBtnDetail', 'HeaderType'],\n    watch: {\n      data(val, oldVal) {\n        if (!this.data.length) {\n          this.tableData = [];\n          return;\n        }\n        this.tableData = this.formatData(this.changeTree());\n        this.loading = false;\n      },\n    },\n    data() {\n      return {\n        tableData: [],\n        diaplay: true,\n        // segmentId: [],\n        showDetail: false,\n        list: [],\n        currentSpan: [],\n        loading: true,\n      };\n    },\n    methods: {\n      copy,\n      // 给增加层级关系\n      formatData(arr, level = 1, totalExec = null) {\n        for (const item of arr) {\n          item.level = level;\n          totalExec = totalExec || (item.endTime - item.startTime);\n          item.totalExec = totalExec;\n          if (item.children && item.children.length > 0) {\n            this.formatData(item.children, level + 1, totalExec);\n          }\n        }\n        return arr;\n      },\n      traverseTree(node, spanId, segmentId, data) {\n        if (!node) {\n          return;\n        }\n        if (node.spanId === spanId && node.segmentId === segmentId) {\n          node.children.push(data);\n          return;\n        }\n        if (node.children && node.children.length > 0) {\n          for (const item of node.children) {\n            this.traverseTree(item, spanId, segmentId, data);\n          }\n        }\n      },\n      changeTree() {\n        if (this.data.length === 0) {\n          return [];\n        }\n        this.list = Array.from(new Set(this.data.map((i) => i.serviceCode)));\n        this.segmentId = [];\n        const segmentGroup = {};\n        const segmentIdGroup = [];\n        const fixSpans = [];\n        const segmentHeaders = [];\n        this.data.forEach((span) => {\n          if (span.parentSpanId === -1) {\n            segmentHeaders.push(span);\n          } else {\n            const index = this.data.findIndex(i => (i.segmentId === span.segmentId && i.spanId === (span.spanId - 1)));\n            const fixSpanKeyContent = {\n              traceId: span.traceId,\n              segmentId: span.segmentId,\n              spanId: span.spanId - 1,\n              parentSpanId: span.spanId - 2,\n            };\n            if (index === -1 && !_.find(fixSpans, fixSpanKeyContent)) {\n              fixSpans.push(\n                {\n                  ...fixSpanKeyContent, refs: [], endpointName: `VNode: ${span.segmentId}`, serviceCode: 'VirtualNode', type: `[Broken] ${span.type}`, peer: '', component: `VirtualNode: #${span.spanId - 1}`, isError: true, isBroken: true, layer: 'Broken', tags: [], logs: [],\n                },\n              );\n            }\n          }\n        });\n          segmentHeaders.forEach((span) => {\n            if (span.refs && span.refs.length) {\n              span.refs.forEach((ref) => {\n                const index = this.data.findIndex(i => (ref.parentSegmentId === i.segmentId && ref.parentSpanId === i.spanId));\n                if (index === -1) {\n                  // create a known broken node.\n                  const i = ref.parentSpanId;\n                  const fixSpanKeyContent = {\n                    traceId: ref.traceId,\n                    segmentId: ref.parentSegmentId,\n                    spanId: i,\n                    parentSpanId: i > -1 ? 0 : -1,\n                  };\n                  !_.find(fixSpans, fixSpanKeyContent) && fixSpans.push(\n                    {\n                      ...fixSpanKeyContent, refs: [], endpointName: `VNode: ${ref.parentSegmentId}`, serviceCode: 'VirtualNode', type: `[Broken] ${ref.type}`, peer: '', component: `VirtualNode: #${i}`, isError: true, isBroken: true, layer: 'Broken', tags: [], logs: [],\n                    },\n                  );\n                  // if root broken node is not exist, create a root broken node.\n                  if (fixSpanKeyContent.parentSpanId > -1) {\n                    const fixRootSpanKeyContent = {\n                      traceId: ref.traceId,\n                      segmentId: ref.parentSegmentId,\n                      spanId: 0,\n                      parentSpanId: -1,\n                    };\n                    !_.find(fixSpans, fixRootSpanKeyContent) && fixSpans.push(\n                      {\n                        ...fixRootSpanKeyContent,\n                        refs: [],\n                        endpointName: `VNode: ${ref.parentSegmentId}`,\n                        serviceCode: 'VirtualNode',\n                        type: `[Broken] ${ref.type}`,\n                        peer: '',\n                        component: `VirtualNode: #0`,\n                        isError: true,\n                        isBroken: true,\n                        layer: 'Broken',\n                        tags: [],\n                        logs: [],\n                      },\n                    );\n                  }\n                }\n              });\n            }\n          });\n          [...fixSpans, ...this.data].forEach(i => {\n            i.label=i.endpointName || 'no operation name';\n            i.children = [];\n            if(segmentGroup[i.segmentId] === undefined){\n              segmentIdGroup.push(i.segmentId);\n              segmentGroup[i.segmentId] = [];\n              segmentGroup[i.segmentId].push(i);\n            }else{\n              segmentGroup[i.segmentId].push(i);\n            }\n          });\n          segmentIdGroup.forEach(id => {\n            let currentSegment = segmentGroup[id].sort((a,b) => b.parentSpanId-a.parentSpanId);\n            currentSegment.forEach(s =>{\n              let index = currentSegment.findIndex(i => i.spanId === s.parentSpanId);\n              if (index !== -1) {\n                if ((currentSegment[index].isBroken && currentSegment[index].parentSpanId === -1) || !currentSegment[index].isBroken) {\n                  currentSegment[index].children.push(s);\n                  currentSegment[index].children.sort((a, b) => a.spanId - b.spanId);\n                }\n              }\n              if (s.isBroken) {\n                const children = _.filter(this.data, (span) => {\n                  return _.find(span.refs, {traceId: s.traceId, parentSegmentId: s.segmentId, parentSpanId: s.spanId});\n                });\n                children.length > 0 && s.children.push(...children);\n              }\n            })\n            segmentGroup[id] = currentSegment[currentSegment.length-1]\n          })\n          segmentIdGroup.forEach(id => {\n            segmentGroup[id].refs && segmentGroup[id].refs.forEach(ref => {\n              if(ref.traceId === this.traceId) {\n                this.traverseTree(segmentGroup[ref.parentSegmentId],ref.parentSpanId,ref.parentSegmentId,segmentGroup[id])\n              };\n            })\n            // if(segmentGroup[id].refs.length !==0 ) delete segmentGroup[id];\n          })\n        for (const i in segmentGroup) {\n          if (segmentGroup[i].refs && segmentGroup[i].refs.length === 0 || !segmentGroup[i].refs) {\n            this.segmentId.push(segmentGroup[i]);\n          }\n        }\n        this.segmentId.forEach((_, i) => {\n          this.collapse(this.segmentId[i]);\n        });\n        return this.segmentId;\n      },\n      collapse(d) {\n        if (d.children) {\n          let dur = d.endTime - d.startTime;\n          d.children.forEach((i) => {\n            dur -= (i.endTime - i.startTime);\n          });\n          d.dur = dur < 0 ? 0 : dur;\n          d.children.forEach((i) => this.collapse(i));\n        }\n      },\n      handleSelectSpan(data) {\n        this.currentSpan = data;\n        if (!this.showBtnDetail) {\n          this.showDetail = true;\n        }\n        this.$emit('selectSpan', data);\n      },\n      showCurrentSpanDetail(title, text) {\n        const textLineNumber = text.split('\\n').length;\n        let textHeight = textLineNumber * 20.2 + 10;\n        const tmpHeight = window.innerHeight * 0.9\n        textHeight = textHeight >= tmpHeight ? tmpHeight : textHeight;\n        this.$modal.show('dialog', {\n          title,\n          text: `<div style=\"height:${textHeight}px\">${text}</div>`,\n          buttons: [\n            {\n              title: 'Copy',\n              handler: () => {\n                this.copy(text);\n              },\n            },\n            {\n              title: 'Close',\n            },\n          ],\n        })\n      },\n      handleViewSpan(data) {\n        this.showDetail = true;\n      }\n    },\n    created() {\n      this.loading = true;\n    },\n    mounted() {\n      this.tableData = this.formatData(this.changeTree());\n      this.loading = false;\n      this.$eventBus.$on('HANDLE-SELECT-SPAN', this, this.handleSelectSpan);\n      this.$eventBus.$on('HANDLE-VIEW-SPAN', this, this.handleViewSpan);\n      this.$eventBus.$on('TRACE-TABLE-LOADING', this, ()=>{ this.loading = true });\n    },\n  };\n</script>\n<style>\n  .dialog-c-text {\n    white-space: pre;\n    overflow: auto;\n    font-family: monospace;\n  }\n  .trace-tips {\n    width: 100%;\n    text-align: center;\n    margin-top: 10px;\n  }\n</style>\n"]}]}