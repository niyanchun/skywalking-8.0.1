{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/topology/topo-group/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/topology/topo-group/index.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.topo-group {\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  .rk-page {\n    color: #eee;\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/components/topology/topo-group","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n<template>\n  <div class=\"topo-group\">\n    <div class=\"topo-group-wrapper\">\n      <div v-for=\"i in pagedData\">\n        <GroupItem\n          :servicesMap=\"servicesMap\"\n          :active=\"rocketTopoGroup.groupId === i.id\"\n          :key=\"i.id\"\n          @delete=\"handleDeleteGroup(i.id)\"\n          @select=\"handleSelectGroup\"\n          :data=\"i\"\n        />\n      </div>\n    </div>\n    <RkPage\n      v-show=\"rocketTopoGroup.groups.length > 10\"\n      :total=\"rocketTopoGroup.groups.length\"\n      @changePage=\"page\"\n      :currentPage=\"currentPage\"\n    />\n    <CreateGroup />\n  </div>\n</template>\n<script lang=\"ts\">\n  import topo, { State as topoState } from '@/store/modules/topology';\n  import { Component, Vue, Watch } from 'vue-property-decorator';\n  import { Action, Getter, Mutation, State } from 'vuex-class';\n  import { State as TopoGroupState } from '@/store/modules/topology/group';\n  import CreateGroup from './create-group.vue';\n  import GroupItem from './group-item.vue';\n  import Axios, { AxiosResponse } from 'axios';\n\n  @Component({\n    components: {\n      CreateGroup,\n      GroupItem,\n    },\n  })\n  export default class TopoGroup extends Vue {\n    @State('rocketTopo') private stateTopo!: topoState;\n    @State('rocketTopoGroup') private rocketTopoGroup!: TopoGroupState;\n    @Getter('durationTime') private durationTime: any;\n    @Getter('rocketTopoGroup/services') private services!: Array<{ label: string; key: string }>;\n    @Mutation('rocketTopoGroup/INIT_GROUPS') private INIT_GROUPS: any;\n    @Mutation('rocketTopoGroup/DELETE_GROUP') private DELETE_GROUP: any;\n    @Mutation('rocketTopoGroup/SELECT_GROUP') private SELECT_GROUP: any;\n    @Mutation('SET_EVENTS') private SET_EVENTS: any;\n    @Action('rocketTopo/FILTER_TOPO') private FILTER_TOPO: any;\n    @Action('rocketTopo/GET_TOPO') private GET_TOPO: any;\n    private servicesMap = [];\n    private currentPage = 1;\n    private get pagedData() {\n      const start = 10 * this.currentPage;\n      let end = 10;\n      if (start < this.rocketTopoGroup.groups.length) {\n        end = start;\n      } else {\n        end = this.rocketTopoGroup.groups.length;\n      }\n      return this.rocketTopoGroup.groups.slice(start - 10, end);\n    }\n    private page(pageNumber: number) {\n      this.currentPage = pageNumber;\n    }\n    private handleDeleteGroup(id: string) {\n      const r = confirm('Do you want to delete this group!');\n      if (r === true) {\n        this.DELETE_GROUP(id);\n      }\n    }\n    private handleSelectGroup(id: string) {\n      this.SELECT_GROUP(id);\n      this.GET_TOPO({ duration: this.durationTime, serviceIds: this.services.map((i) => i.key) });\n    }\n    private fetchData() {\n      return Axios.post('/graphql', {\n        query: `\n          query queryServices($duration: Duration!) {\n            services: getAllServices(duration: $duration) {\n              key: id\n              label: name\n            }\n          }`,\n        variables: {\n          duration: this.durationTime,\n        },\n      }).then((res: AxiosResponse) => {\n        this.servicesMap = res.data.data.services ? res.data.data.services : [];\n      });\n    }\n    private initGroupTopo() {\n      let serviceOld = localStorage.getItem('topology-group-history') || '';\n      if (!this.rocketTopoGroup.groups.length) {\n        return;\n      }\n      if (\n        !this.rocketTopoGroup.groups.some(\n          (i: { id: string; name: string; services: Array<{ label: string; key: string }> }) => i.id === serviceOld,\n        )\n      ) {\n        serviceOld = this.rocketTopoGroup.groups[0].id;\n        this.handleSelectGroup(serviceOld);\n      } else {\n        this.handleSelectGroup(serviceOld);\n      }\n    }\n    private created() {\n      this.INIT_GROUPS();\n      this.fetchData().then(() => {\n        this.initGroupTopo();\n      });\n    }\n  }\n</script>\n<style lang=\"scss\">\n  .topo-group {\n    position: absolute;\n    bottom: 10px;\n    left: 10px;\n    .rk-page {\n      color: #eee;\n    }\n  }\n</style>\n"]}]}