{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/charts/chart-heatmap.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/charts/chart-heatmap.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\nimport { Component, Prop } from 'vue-property-decorator';\nimport 'echarts/lib/component/visualMap';\nimport moment from 'dayjs';\n@Component\nexport default class ChartHeatmap extends Vue {\n  @Prop() private title!: string;\n  @Prop() private type!: string;\n  @Prop() private data!: any;\n  @Prop() private intervalTime!: any;\n  @Prop() private item!: any;\n  public resize() {\n    const chart: any = this.$refs.chart;\n    chart.myChart.resize();\n  }\n  get option() {\n    const source = (this.data.nodes || []).map((d: number[]) => d[2]);\n    const maxItem = Math.max(...source);\n    const minItem = Math.min(...source);\n    const colorBox = [\n      '#fff',\n      '#FDF0F0',\n      '#FAE2E2',\n      '#F8D3D3',\n      '#F6C4C4',\n      '#F4B5B5',\n      '#F1A7A7',\n      '#EF9898',\n      '#E86C6C',\n      '#E44E4E',\n      '#E23F3F',\n      '#DF3131',\n      '#DD2222',\n      '#CE2020',\n      '#C01D1D',\n      '#B11B1B',\n      '#A21919',\n      '#851414',\n      '#761212',\n      '#671010',\n    ];\n    return {\n      tooltip: {\n        position: 'top',\n        formatter: (a: any) => `${a.data[1] * 100}${this.item.unit}  [ ${a.data[2]} ]`,\n        textStyle: {\n          fontSize: 13,\n        },\n      },\n      grid: {\n        top: 15,\n        left: 0,\n        right: 10,\n        bottom: 5,\n        containLabel: true,\n      },\n      xAxis: {\n        type: 'category',\n        data: this.intervalTime,\n        axisTick: {\n          lineStyle: { color: '#c1c5ca' },\n          alignWithLabel: true,\n        },\n        splitLine: { show: false },\n        axisLine: { lineStyle: { color: 'rgba(0,0,0,0)' } },\n        axisLabel: { color: '#9da5b2', fontSize: '11' },\n      },\n      visualMap: [\n        {\n          min: minItem,\n          max: maxItem,\n          show: false,\n          type: 'piecewise',\n          calculable: true,\n          pieces: this.generatePieces(maxItem, colorBox, minItem),\n        },\n      ],\n      yAxis: {\n        type: 'category',\n        axisLine: { show: false },\n        axisTick: { show: false },\n        splitLine: { lineStyle: { color: '#c1c5ca', type: 'dashed' } },\n        axisLabel: { color: '#9da5b2', fontSize: '11' },\n        data: this.data.buckets,\n      },\n      series: [\n        {\n          type: 'heatmap',\n          data: this.data.nodes || [],\n          itemStyle: {\n            emphasis: {\n              shadowBlur: 10,\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\n            },\n          },\n        },\n      ],\n    };\n  }\n  private generatePieces(maxValue: number, colorBox: string[], minItem: number) {\n    const pieces = [];\n    let quotient = 1;\n    let temp = {} as any;\n    temp.max = minItem;\n    temp.min = minItem;\n    temp.color = colorBox[0];\n    pieces.push(temp);\n    if (maxValue && maxValue >= 19) {\n      quotient = Math.floor(maxValue / 19);\n      for (let i = 1; i < 20; i++) {\n        temp = {} as any;\n        if (i === 1) {\n          temp.min = minItem;\n        } else {\n          temp.min = quotient * (i - 1);\n        }\n        temp.max = quotient * i;\n        temp.color = colorBox[i];\n        pieces.push(temp);\n      }\n    }\n    const length = pieces.length;\n    if (length) {\n      const item = pieces[length - 1];\n      item.max = maxValue;\n    }\n    return pieces;\n  }\n}\n",{"version":3,"sources":["chart-heatmap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"chart-heatmap.vue","sourceRoot":"src/views/components/dashboard/charts","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n\n<template>\n  <RkEcharts ref=\"chart\" :option=\"option\" />\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import 'echarts/lib/component/visualMap';\n  import moment from 'dayjs';\n  @Component\n  export default class ChartHeatmap extends Vue {\n    @Prop() private title!: string;\n    @Prop() private type!: string;\n    @Prop() private data!: any;\n    @Prop() private intervalTime!: any;\n    @Prop() private item!: any;\n    public resize() {\n      const chart: any = this.$refs.chart;\n      chart.myChart.resize();\n    }\n    get option() {\n      const source = (this.data.nodes || []).map((d: number[]) => d[2]);\n      const maxItem = Math.max(...source);\n      const minItem = Math.min(...source);\n      const colorBox = [\n        '#fff',\n        '#FDF0F0',\n        '#FAE2E2',\n        '#F8D3D3',\n        '#F6C4C4',\n        '#F4B5B5',\n        '#F1A7A7',\n        '#EF9898',\n        '#E86C6C',\n        '#E44E4E',\n        '#E23F3F',\n        '#DF3131',\n        '#DD2222',\n        '#CE2020',\n        '#C01D1D',\n        '#B11B1B',\n        '#A21919',\n        '#851414',\n        '#761212',\n        '#671010',\n      ];\n      return {\n        tooltip: {\n          position: 'top',\n          formatter: (a: any) => `${a.data[1] * 100}${this.item.unit}  [ ${a.data[2]} ]`,\n          textStyle: {\n            fontSize: 13,\n          },\n        },\n        grid: {\n          top: 15,\n          left: 0,\n          right: 10,\n          bottom: 5,\n          containLabel: true,\n        },\n        xAxis: {\n          type: 'category',\n          data: this.intervalTime,\n          axisTick: {\n            lineStyle: { color: '#c1c5ca' },\n            alignWithLabel: true,\n          },\n          splitLine: { show: false },\n          axisLine: { lineStyle: { color: 'rgba(0,0,0,0)' } },\n          axisLabel: { color: '#9da5b2', fontSize: '11' },\n        },\n        visualMap: [\n          {\n            min: minItem,\n            max: maxItem,\n            show: false,\n            type: 'piecewise',\n            calculable: true,\n            pieces: this.generatePieces(maxItem, colorBox, minItem),\n          },\n        ],\n        yAxis: {\n          type: 'category',\n          axisLine: { show: false },\n          axisTick: { show: false },\n          splitLine: { lineStyle: { color: '#c1c5ca', type: 'dashed' } },\n          axisLabel: { color: '#9da5b2', fontSize: '11' },\n          data: this.data.buckets,\n        },\n        series: [\n          {\n            type: 'heatmap',\n            data: this.data.nodes || [],\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\n              },\n            },\n          },\n        ],\n      };\n    }\n    private generatePieces(maxValue: number, colorBox: string[], minItem: number) {\n      const pieces = [];\n      let quotient = 1;\n      let temp = {} as any;\n      temp.max = minItem;\n      temp.min = minItem;\n      temp.color = colorBox[0];\n      pieces.push(temp);\n      if (maxValue && maxValue >= 19) {\n        quotient = Math.floor(maxValue / 19);\n        for (let i = 1; i < 20; i++) {\n          temp = {} as any;\n          if (i === 1) {\n            temp.min = minItem;\n          } else {\n            temp.min = quotient * (i - 1);\n          }\n          temp.max = quotient * i;\n          temp.color = colorBox[i];\n          pieces.push(temp);\n        }\n      }\n      const length = pieces.length;\n      if (length) {\n        const item = pieces[length - 1];\n        item.max = maxValue;\n      }\n      return pieces;\n    }\n  }\n</script>\n"]}]}