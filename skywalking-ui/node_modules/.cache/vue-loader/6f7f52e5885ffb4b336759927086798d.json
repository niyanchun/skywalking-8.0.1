{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/dashboard-item.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/dashboard-item.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Vue, Component, Prop, Watch } from 'vue-property-decorator';\nimport charts from './charts';\nimport { QueryTypes } from './constant';\nimport { TopologyType, ObjectsType } from '../../constant';\nimport { MetricsType, CalculationType } from './charts/constant';\nimport { uuid } from '@/utils/uuid.ts';\n\nimport { Mutation, State, Getter, Action } from 'vuex-class';\n\n@Component({\n  components: { ...charts },\n})\nexport default class DashboardItem extends Vue {\n  @State('rocketOption') private rocketOption: any;\n  @State('rocketbot') private rocketGlobal: any;\n  @Mutation('EDIT_COMP_CONFIG') private EDIT_COMP_CONFIG: any;\n  @Mutation('DELETE_COMP') private DELETE_COMP: any;\n  @Mutation('rocketTopo/DELETE_TOPO_ENDPOINT') private DELETE_TOPO_ENDPOINT: any;\n  @Mutation('rocketTopo/DELETE_TOPO_INSTANCE') private DELETE_TOPO_INSTANCE: any;\n  @Action('GET_QUERY') private GET_QUERY: any;\n  @Getter('intervalTime') private intervalTime: any;\n  @Getter('durationTime') private durationTime: any;\n  @Prop() private item!: any;\n  @Prop() private index!: number;\n  @Prop() private type!: string;\n  @Prop() private updateObjects!: string;\n\n  private pageTypes = [TopologyType.TOPOLOGY_ENDPOINT, TopologyType.TOPOLOGY_INSTANCE] as any[];\n  private dialogConfigVisible = false;\n  private status = 'UNKNOWN';\n  private title = 'Title';\n  private unit = '';\n  private width = 3;\n  private height = 300;\n  private chartSource: any = {};\n  private itemConfig: any = {};\n\n  private created() {\n    this.status = this.item.metricType;\n    this.title = this.item.title;\n    this.width = this.item.width;\n    this.height = this.item.height;\n    this.unit = this.item.unit;\n    this.itemConfig = this.item;\n    const types = [ObjectsType.UPDATE_INSTANCES, ObjectsType.UPDATE_ENDPOINTS, ObjectsType.UPDATE_DASHBOARD] as any[];\n\n    if (!types.includes(this.updateObjects)) {\n      return;\n    }\n    setTimeout(() => {\n      this.chartRender();\n    }, 200);\n  }\n\n  private chartRender() {\n    if (this.rocketGlobal.edit) {\n      return;\n    }\n\n    this.GET_QUERY({\n      duration: this.durationTime,\n      index: this.index,\n      type: this.type,\n    }).then((params: Array<{ metricName: string; [key: string]: any; config: any }>) => {\n      if (!params) {\n        return;\n      }\n      if (!params.length) {\n        return;\n      }\n      this.itemConfig = params[0].config;\n      const { queryMetricType } = this.itemConfig;\n      let data = params;\n      if (queryMetricType !== QueryTypes.ReadMetricsValues) {\n        data = [params[0]];\n      }\n      this.chartValue(data);\n    });\n  }\n\n  private chartValue(data: Array<{ metricName: string; [key: string]: any; config: any }>) {\n    this.chartSource = {};\n    for (const params of data) {\n      const { queryMetricType, aggregation, aggregationNum, metricLabels, labelsIndex } = params.config;\n      const resVal = params[queryMetricType];\n\n      if (queryMetricType === QueryTypes.ReadMetricsValue) {\n        this.chartSource = {\n          avgNum: this.aggregationValue({ data: resVal, type: aggregation, aggregationNum: Number(aggregationNum) }),\n        };\n      }\n      if (queryMetricType === QueryTypes.ReadMetricsValues) {\n        if (!(resVal && resVal.values)) {\n          this.chartSource[params.metricName] = [];\n          return;\n        }\n        const { values } = resVal.values;\n        this.chartSource[params.metricName] = values.map((item: { value: number }) =>\n          this.aggregationValue({ data: item.value, type: aggregation, aggregationNum: Number(aggregationNum) }),\n        );\n      }\n      if (queryMetricType === QueryTypes.SortMetrics || queryMetricType === QueryTypes.ReadSampledRecords) {\n        this.chartSource = (resVal || []).map((item: { value: number }) => {\n          return {\n            ...item,\n            value: this.aggregationValue({\n              data: item.value,\n              type: aggregation,\n              aggregationNum: Number(aggregationNum),\n            }),\n          };\n        });\n      }\n      if (queryMetricType === QueryTypes.READHEATMAP) {\n        const nodes = [] as any;\n        if (!(resVal && resVal.values)) {\n          this.chartSource = { nodes: [] };\n          return;\n        }\n        resVal.values.forEach((items: { values: number[] }, x: number) => {\n          const grids = items.values.map((val: number, y: number) => [\n            x,\n            y,\n            this.aggregationValue({ data: val, type: aggregation, aggregationNum: Number(aggregationNum) }),\n          ]);\n\n          nodes.push(...grids);\n        });\n        let buckets = [] as any;\n        if (resVal.buckets.length) {\n          buckets = [resVal.buckets[0].min, ...resVal.buckets.map((item: { min: string; max: string }) => item.max)];\n        }\n\n        this.chartSource = { nodes, buckets }; // nodes: number[][]\n      }\n      if (queryMetricType === QueryTypes.ReadLabeledMetricsValues) {\n        const labels = (metricLabels || '').split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n        const indexList = (labelsIndex || '').split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n\n        this.chartSource = {};\n        for (const item of resVal || []) {\n          const list = item.values.values.map((d: { value: number }) =>\n            this.aggregationValue({ data: d.value, type: aggregation, aggregationNum: Number(aggregationNum) }),\n          );\n\n          const indexNum = indexList.findIndex((d: string) => d === item.label);\n          if (labels[indexNum] && indexNum > -1) {\n            this.chartSource[labels[indexNum]] = list; // {[label: string]: number[]}\n          } else {\n            this.chartSource[item.label] = list;\n          }\n        }\n      }\n    }\n  }\n\n  private editComponentConfig() {\n    this.dialogConfigVisible = true;\n  }\n\n  private aggregationValue(json: { data: number; type: string; aggregationNum: number }) {\n    if (isNaN(json.aggregationNum)) {\n      return json.data;\n    }\n    if (json.type === CalculationType[0].value) {\n      return json.data + json.aggregationNum;\n    }\n    if (json.type === CalculationType[1].value) {\n      return json.data - json.aggregationNum;\n    }\n    if (json.type === CalculationType[2].value) {\n      return json.data * json.aggregationNum;\n    }\n    if (json.type === CalculationType[3].value) {\n      return json.data / json.aggregationNum;\n    }\n    return json.data;\n  }\n\n  private setStatus(type: string, value: any) {\n    if (type === 'metricType') {\n      this.status = value;\n    }\n    if (type === 'title') {\n      this.title = value;\n    }\n    if (type === 'width') {\n      this.width = value;\n    }\n    if (type === 'height') {\n      this.height = value;\n    }\n    if (type === 'unit') {\n      this.unit = value;\n    }\n  }\n\n  private deleteItem(index: number) {\n    if (this.type === this.pageTypes[0]) {\n      this.DELETE_TOPO_ENDPOINT(index);\n    } else if (this.type === this.pageTypes[1]) {\n      this.DELETE_TOPO_INSTANCE(index);\n    } else {\n      this.DELETE_COMP(index);\n    }\n  }\n\n  @Watch('rocketOption.updateDashboard')\n  private watchCurrentSelectors() {\n    setTimeout(() => {\n      this.chartRender();\n    }, 200);\n  }\n  @Watch('durationTime')\n  private watchDurationTime() {\n    this.chartRender();\n  }\n  @Watch('rocketGlobal.edit')\n  private watchRerender() {\n    this.chartRender();\n  }\n}\n",{"version":3,"sources":["dashboard-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"dashboard-item.vue","sourceRoot":"src/views/components/dashboard","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div class=\"rk-dashboard-item\" :class=\"`g-sm-${width}`\" :style=\"`height:${height}px;`\">\n    <div class=\"rk-dashboard-item-title ell\">\n      <svg class=\"icon cp red r\" v-show=\"rocketGlobal.edit\" @click=\"deleteItem(index)\">\n        <use xlink:href=\"#file-deletion\"></use>\n      </svg>\n      <span>{{ title }}</span>\n      <span v-show=\"unit\"> ( {{ unit }} ) </span>\n      <span v-show=\"status === 'UNKNOWN'\" class=\"item-status\">( {{ $t('unknownMetrics') }} )</span>\n      <span v-show=\"!rocketGlobal.edit && !pageTypes.includes(type)\" @click=\"editComponentConfig\">\n        <svg class=\"icon cp r\">\n          <use xlink:href=\"#lock\"></use>\n        </svg>\n      </span>\n    </div>\n    <div class=\"rk-dashboard-item-body\">\n      <div style=\"height:100%;\">\n        <component\n          :is=\"rocketGlobal.edit ? 'ChartEdit' : itemConfig.chartType\"\n          ref=\"chart\"\n          :item=\"itemConfig\"\n          :index=\"index\"\n          :intervalTime=\"intervalTime\"\n          :data=\"chartSource\"\n          :type=\"type\"\n          @updateStatus=\"(type, value) => setStatus(type, value)\"\n        ></component>\n      </div>\n    </div>\n    <rk-sidebox\n      width=\"70%\"\n      :fixed=\"true\"\n      :title=\"$t('editConfig')\"\n      :show.sync=\"dialogConfigVisible\"\n      @closeSideboxCallback=\"chartRender()\"\n    >\n      <div class=\"config-box\">\n        <component\n          :is=\"'ChartEdit'\"\n          ref=\"chart\"\n          :item=\"itemConfig\"\n          :index=\"index\"\n          :intervalTime=\"intervalTime\"\n          :data=\"chartSource\"\n        ></component>\n      </div>\n    </rk-sidebox>\n  </div>\n</template>\n<script lang=\"ts\">\n  import { Vue, Component, Prop, Watch } from 'vue-property-decorator';\n  import charts from './charts';\n  import { QueryTypes } from './constant';\n  import { TopologyType, ObjectsType } from '../../constant';\n  import { MetricsType, CalculationType } from './charts/constant';\n  import { uuid } from '@/utils/uuid.ts';\n\n  import { Mutation, State, Getter, Action } from 'vuex-class';\n\n  @Component({\n    components: { ...charts },\n  })\n  export default class DashboardItem extends Vue {\n    @State('rocketOption') private rocketOption: any;\n    @State('rocketbot') private rocketGlobal: any;\n    @Mutation('EDIT_COMP_CONFIG') private EDIT_COMP_CONFIG: any;\n    @Mutation('DELETE_COMP') private DELETE_COMP: any;\n    @Mutation('rocketTopo/DELETE_TOPO_ENDPOINT') private DELETE_TOPO_ENDPOINT: any;\n    @Mutation('rocketTopo/DELETE_TOPO_INSTANCE') private DELETE_TOPO_INSTANCE: any;\n    @Action('GET_QUERY') private GET_QUERY: any;\n    @Getter('intervalTime') private intervalTime: any;\n    @Getter('durationTime') private durationTime: any;\n    @Prop() private item!: any;\n    @Prop() private index!: number;\n    @Prop() private type!: string;\n    @Prop() private updateObjects!: string;\n\n    private pageTypes = [TopologyType.TOPOLOGY_ENDPOINT, TopologyType.TOPOLOGY_INSTANCE] as any[];\n    private dialogConfigVisible = false;\n    private status = 'UNKNOWN';\n    private title = 'Title';\n    private unit = '';\n    private width = 3;\n    private height = 300;\n    private chartSource: any = {};\n    private itemConfig: any = {};\n\n    private created() {\n      this.status = this.item.metricType;\n      this.title = this.item.title;\n      this.width = this.item.width;\n      this.height = this.item.height;\n      this.unit = this.item.unit;\n      this.itemConfig = this.item;\n      const types = [ObjectsType.UPDATE_INSTANCES, ObjectsType.UPDATE_ENDPOINTS, ObjectsType.UPDATE_DASHBOARD] as any[];\n\n      if (!types.includes(this.updateObjects)) {\n        return;\n      }\n      setTimeout(() => {\n        this.chartRender();\n      }, 200);\n    }\n\n    private chartRender() {\n      if (this.rocketGlobal.edit) {\n        return;\n      }\n\n      this.GET_QUERY({\n        duration: this.durationTime,\n        index: this.index,\n        type: this.type,\n      }).then((params: Array<{ metricName: string; [key: string]: any; config: any }>) => {\n        if (!params) {\n          return;\n        }\n        if (!params.length) {\n          return;\n        }\n        this.itemConfig = params[0].config;\n        const { queryMetricType } = this.itemConfig;\n        let data = params;\n        if (queryMetricType !== QueryTypes.ReadMetricsValues) {\n          data = [params[0]];\n        }\n        this.chartValue(data);\n      });\n    }\n\n    private chartValue(data: Array<{ metricName: string; [key: string]: any; config: any }>) {\n      this.chartSource = {};\n      for (const params of data) {\n        const { queryMetricType, aggregation, aggregationNum, metricLabels, labelsIndex } = params.config;\n        const resVal = params[queryMetricType];\n\n        if (queryMetricType === QueryTypes.ReadMetricsValue) {\n          this.chartSource = {\n            avgNum: this.aggregationValue({ data: resVal, type: aggregation, aggregationNum: Number(aggregationNum) }),\n          };\n        }\n        if (queryMetricType === QueryTypes.ReadMetricsValues) {\n          if (!(resVal && resVal.values)) {\n            this.chartSource[params.metricName] = [];\n            return;\n          }\n          const { values } = resVal.values;\n          this.chartSource[params.metricName] = values.map((item: { value: number }) =>\n            this.aggregationValue({ data: item.value, type: aggregation, aggregationNum: Number(aggregationNum) }),\n          );\n        }\n        if (queryMetricType === QueryTypes.SortMetrics || queryMetricType === QueryTypes.ReadSampledRecords) {\n          this.chartSource = (resVal || []).map((item: { value: number }) => {\n            return {\n              ...item,\n              value: this.aggregationValue({\n                data: item.value,\n                type: aggregation,\n                aggregationNum: Number(aggregationNum),\n              }),\n            };\n          });\n        }\n        if (queryMetricType === QueryTypes.READHEATMAP) {\n          const nodes = [] as any;\n          if (!(resVal && resVal.values)) {\n            this.chartSource = { nodes: [] };\n            return;\n          }\n          resVal.values.forEach((items: { values: number[] }, x: number) => {\n            const grids = items.values.map((val: number, y: number) => [\n              x,\n              y,\n              this.aggregationValue({ data: val, type: aggregation, aggregationNum: Number(aggregationNum) }),\n            ]);\n\n            nodes.push(...grids);\n          });\n          let buckets = [] as any;\n          if (resVal.buckets.length) {\n            buckets = [resVal.buckets[0].min, ...resVal.buckets.map((item: { min: string; max: string }) => item.max)];\n          }\n\n          this.chartSource = { nodes, buckets }; // nodes: number[][]\n        }\n        if (queryMetricType === QueryTypes.ReadLabeledMetricsValues) {\n          const labels = (metricLabels || '').split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n          const indexList = (labelsIndex || '').split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n\n          this.chartSource = {};\n          for (const item of resVal || []) {\n            const list = item.values.values.map((d: { value: number }) =>\n              this.aggregationValue({ data: d.value, type: aggregation, aggregationNum: Number(aggregationNum) }),\n            );\n\n            const indexNum = indexList.findIndex((d: string) => d === item.label);\n            if (labels[indexNum] && indexNum > -1) {\n              this.chartSource[labels[indexNum]] = list; // {[label: string]: number[]}\n            } else {\n              this.chartSource[item.label] = list;\n            }\n          }\n        }\n      }\n    }\n\n    private editComponentConfig() {\n      this.dialogConfigVisible = true;\n    }\n\n    private aggregationValue(json: { data: number; type: string; aggregationNum: number }) {\n      if (isNaN(json.aggregationNum)) {\n        return json.data;\n      }\n      if (json.type === CalculationType[0].value) {\n        return json.data + json.aggregationNum;\n      }\n      if (json.type === CalculationType[1].value) {\n        return json.data - json.aggregationNum;\n      }\n      if (json.type === CalculationType[2].value) {\n        return json.data * json.aggregationNum;\n      }\n      if (json.type === CalculationType[3].value) {\n        return json.data / json.aggregationNum;\n      }\n      return json.data;\n    }\n\n    private setStatus(type: string, value: any) {\n      if (type === 'metricType') {\n        this.status = value;\n      }\n      if (type === 'title') {\n        this.title = value;\n      }\n      if (type === 'width') {\n        this.width = value;\n      }\n      if (type === 'height') {\n        this.height = value;\n      }\n      if (type === 'unit') {\n        this.unit = value;\n      }\n    }\n\n    private deleteItem(index: number) {\n      if (this.type === this.pageTypes[0]) {\n        this.DELETE_TOPO_ENDPOINT(index);\n      } else if (this.type === this.pageTypes[1]) {\n        this.DELETE_TOPO_INSTANCE(index);\n      } else {\n        this.DELETE_COMP(index);\n      }\n    }\n\n    @Watch('rocketOption.updateDashboard')\n    private watchCurrentSelectors() {\n      setTimeout(() => {\n        this.chartRender();\n      }, 200);\n    }\n    @Watch('durationTime')\n    private watchDurationTime() {\n      this.chartRender();\n    }\n    @Watch('rocketGlobal.edit')\n    private watchRerender() {\n      this.chartRender();\n    }\n  }\n</script>\n<style lang=\"scss\">\n  .rk-dashboard-item {\n    display: flex;\n    height: 100%;\n    flex-direction: column;\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n  .dashboard-item-shadow {\n    background-color: #448dfe15;\n    position: absolute;\n    border: 1px solid #448dfec0;\n    border-radius: 4px;\n  }\n  .rk-dashboard-item-title {\n    flex-shrink: 0;\n    user-select: none;\n    line-height: 16px;\n    border-radius: 2px;\n    background-color: rgba(196, 200, 225, 0.2);\n    color: #9da5b2;\n    padding: 6px 10px;\n  }\n  .rk-dashboard-item-title .hint {\n    color: #fbb03b;\n    padding-left: 10px;\n  }\n  .dashboard-item-title-input {\n    border-style: unset;\n    background-color: #ffffffcc;\n    outline: 0;\n    border-radius: 3px;\n    padding: 5px;\n    height: 16px;\n    margin-left: -5px;\n  }\n  .dashboard-item-resize {\n    position: absolute;\n    fill: #9da5b2;\n    z-index: 1;\n    width: 8px;\n    height: 8px;\n    padding: 3px;\n    right: -4px;\n    bottom: 0;\n    cursor: se-resize;\n  }\n  .rk-dashboard-item-body {\n    padding: 7px 10px;\n    flex-grow: 1;\n    // height:100%;\n    height: calc(100% - 28px);\n  }\n  .item-status {\n    color: red;\n    display: inline-block;\n    margin-left: 10px;\n  }\n  .config-box {\n    padding: 40px 30px;\n  }\n</style>\n"]}]}