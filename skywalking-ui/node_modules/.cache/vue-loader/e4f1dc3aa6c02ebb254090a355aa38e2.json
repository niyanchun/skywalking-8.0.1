{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/containers/topology/instance/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/containers/topology/instance/index.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport InstancesSurvey from './instances-survey.vue';\nimport ToolBarSelect from '@/views/components/dashboard/tool-bar-select.vue';\nimport ToolBarEndpointSelect from '@/views/components/dashboard/tool-bar-endpoint-select.vue';\nimport _ from 'lodash';\nimport Vue from 'vue';\nimport { Component, PropSync, Watch, Prop } from 'vue-property-decorator';\nimport { Action, Getter, State, Mutation } from 'vuex-class';\nimport { readFile } from '@/utils/readFile';\nimport { saveFile } from '@/utils/saveFile';\nimport { ObjectsType } from '../../../constant';\n\ninterface Instance {\n  label: string;\n  key: string;\n  name?: string;\n}\n\n@Component({\n  components: {\n    InstancesSurvey,\n    ToolBarSelect,\n    ToolBarEndpointSelect,\n  },\n})\nexport default class WindowInstance extends Vue {\n  @State('rocketOption') private stateDashboardOption!: any;\n  @State('rocketData') private rocketComps!: any;\n  @State('rocketbot') private rocketGlobal: any;\n  @Getter('durationTime') private durationTime: any;\n  @Action('SELECT_INSTANCE') private SELECT_INSTANCE: any;\n  @Action('GET_SERVICE_INSTANCES') private GET_SERVICE_INSTANCES: any;\n  @Action('MIXHANDLE_CHANGE_GROUP_WITH_CURRENT') private MIXHANDLE_CHANGE_GROUP_WITH_CURRENT: any;\n  @Mutation('SET_EDIT') private SET_EDIT: any;\n  @Prop() private current!: { key: number | string; label: number | string };\n  @Prop() private instanceComps: any;\n  @Prop() private updateObjects!: string;\n\n  private selectInstance(i: any) {\n    this.SELECT_INSTANCE({ instance: i, duration: this.durationTime });\n  }\n\n  private beforeMount() {\n    this.MIXHANDLE_CHANGE_GROUP_WITH_CURRENT({ index: 0, current: 3 });\n    this.GET_SERVICE_INSTANCES({ duration: this.durationTime, serviceId: this.current.key }).then(() => {\n      this.selectInstance(this.stateDashboardOption.instances[0]);\n    });\n  }\n\n  private async importData(event: any) {\n    try {\n      const data: any = await readFile(event);\n      if (!Array.isArray(data)) {\n        throw new Error();\n      }\n      this.$emit('changeInstanceComps', { json: data, type: ObjectsType.UPDATE_ENDPOINTS });\n      const el: any = document.getElementById('instance-file');\n      el!.value = '';\n    } catch (e) {\n      this.$modal.show('dialog', { text: 'ERROR' });\n    }\n  }\n  private exportData() {\n    const data = this.instanceComps;\n    const name = 'instanceComps.json';\n    saveFile(data, name);\n  }\n\n  private beforeDestroy() {\n    this.$emit('changeInstanceComps', { type: '' });\n    this.SET_EDIT(false);\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/containers/topology/instance","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n\n<template>\n  <div style=\"height: 100%\">\n    <div class=\"rk-dashboard-bar flex-h\">\n      <span class=\"flex-h\">\n        <div class=\"rk-dashboard-bar-btn\">\n          <span v-tooltip:bottom=\"{ content: rocketGlobal.edit ? 'view' : 'edit' }\">\n            <svg\n              class=\"icon lg vm cp rk-btn ghost\"\n              :style=\"`color:${!rocketGlobal.edit ? '' : '#ffc107'}`\"\n              @click=\"() => SET_EDIT(!rocketGlobal.edit)\"\n            >\n              <use :xlink:href=\"!rocketGlobal.edit ? '#lock' : '#lock-open'\"></use>\n            </svg>\n          </span>\n        </div>\n        <div class=\"rk-dashboard-bar-btn\">\n          <span v-tooltip:bottom=\"{ content: 'import' }\">\n            <input id=\"instance-file\" type=\"file\" name=\"file\" title=\"\" accept=\".json\" @change=\"importData\" />\n            <label class=\"rk-btn ghost input-label\" for=\"instance-file\">\n              <svg class=\"icon lg vm cp \" :style=\"`marginTop: 0px`\">\n                <use :xlink:href=\"'#folder_open'\"></use>\n              </svg>\n            </label>\n          </span>\n        </div>\n        <div class=\"rk-dashboard-bar-btn\">\n          <span v-tooltip:bottom=\"{ content: 'export' }\">\n            <svg class=\"icon lg vm cp rk-btn ghost\" @click=\"exportData\">\n              <use :xlink:href=\"'#save_alt'\"></use>\n            </svg>\n          </span>\n        </div>\n      </span>\n      <ToolBarSelect :selectable=\"false\" :title=\"this.$t('currentService')\" :current=\"current\" icon=\"package\" />\n      <ToolBarSelect\n        @onChoose=\"selectInstance\"\n        :title=\"$t('currentInstance')\"\n        :current=\"stateDashboardOption.currentInstance\"\n        :data=\"stateDashboardOption.instances\"\n        icon=\"disk\"\n      />\n    </div>\n    <instances-survey :instanceComps=\"instanceComps\" :updateObjects=\"updateObjects\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import InstancesSurvey from './instances-survey.vue';\n  import ToolBarSelect from '@/views/components/dashboard/tool-bar-select.vue';\n  import ToolBarEndpointSelect from '@/views/components/dashboard/tool-bar-endpoint-select.vue';\n  import _ from 'lodash';\n  import Vue from 'vue';\n  import { Component, PropSync, Watch, Prop } from 'vue-property-decorator';\n  import { Action, Getter, State, Mutation } from 'vuex-class';\n  import { readFile } from '@/utils/readFile';\n  import { saveFile } from '@/utils/saveFile';\n  import { ObjectsType } from '../../../constant';\n\n  interface Instance {\n    label: string;\n    key: string;\n    name?: string;\n  }\n\n  @Component({\n    components: {\n      InstancesSurvey,\n      ToolBarSelect,\n      ToolBarEndpointSelect,\n    },\n  })\n  export default class WindowInstance extends Vue {\n    @State('rocketOption') private stateDashboardOption!: any;\n    @State('rocketData') private rocketComps!: any;\n    @State('rocketbot') private rocketGlobal: any;\n    @Getter('durationTime') private durationTime: any;\n    @Action('SELECT_INSTANCE') private SELECT_INSTANCE: any;\n    @Action('GET_SERVICE_INSTANCES') private GET_SERVICE_INSTANCES: any;\n    @Action('MIXHANDLE_CHANGE_GROUP_WITH_CURRENT') private MIXHANDLE_CHANGE_GROUP_WITH_CURRENT: any;\n    @Mutation('SET_EDIT') private SET_EDIT: any;\n    @Prop() private current!: { key: number | string; label: number | string };\n    @Prop() private instanceComps: any;\n    @Prop() private updateObjects!: string;\n\n    private selectInstance(i: any) {\n      this.SELECT_INSTANCE({ instance: i, duration: this.durationTime });\n    }\n\n    private beforeMount() {\n      this.MIXHANDLE_CHANGE_GROUP_WITH_CURRENT({ index: 0, current: 3 });\n      this.GET_SERVICE_INSTANCES({ duration: this.durationTime, serviceId: this.current.key }).then(() => {\n        this.selectInstance(this.stateDashboardOption.instances[0]);\n      });\n    }\n\n    private async importData(event: any) {\n      try {\n        const data: any = await readFile(event);\n        if (!Array.isArray(data)) {\n          throw new Error();\n        }\n        this.$emit('changeInstanceComps', { json: data, type: ObjectsType.UPDATE_ENDPOINTS });\n        const el: any = document.getElementById('instance-file');\n        el!.value = '';\n      } catch (e) {\n        this.$modal.show('dialog', { text: 'ERROR' });\n      }\n    }\n    private exportData() {\n      const data = this.instanceComps;\n      const name = 'instanceComps.json';\n      saveFile(data, name);\n    }\n\n    private beforeDestroy() {\n      this.$emit('changeInstanceComps', { type: '' });\n      this.SET_EDIT(false);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .rk-dashboard-bar-btn {\n    padding: 0 5px;\n    border-right: 2px solid #252a2f;\n    height: 19px;\n  }\n  #instance-file {\n    display: none;\n  }\n  .input-label {\n    display: inline;\n    line-height: inherit;\n  }\n</style>\n"]}]}