{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/topology/topo-detect-point.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/topology/topo-detect-point.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { State as topoState } from '@/store/modules/topology';\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport { Action, Getter, Mutation, State } from 'vuex-class';\nimport TopoChart from './topo-chart.vue';\nimport TopoInstanceDependency from './topo-instance-dependency.vue';\nimport ChartLine from './chart-line.vue';\n\n@Component({\n  components: {\n    TopoInstanceDependency,\n    TopoChart,\n    ChartLine,\n  },\n})\nexport default class TopoDetectPoint extends Vue {\n  @State('rocketTopo') private stateTopo!: topoState;\n  @Getter('intervalTime') private intervalTime: any;\n  @Getter('durationTime') private durationTime: any;\n  @Action('MIXHANDLE_CHANGE_GROUP_WITH_CURRENT')\n  private MIXHANDLE_CHANGE_GROUP_WITH_CURRENT: any;\n  @Action('MIXHANDLE_GET_OPTION') private MIXHANDLE_GET_OPTION: any;\n  @Mutation('rocketTopo/SET_MODE_STATUS') private SET_MODE_STATUS: any;\n  @Mutation('rocketTopo/SET_SELECTED_INSTANCE_CALL')\n  private SET_SELECTED_INSTANCE_CALL: any;\n  @Mutation('rocketTopo/SET_INSTANCE_DEPENDENCY')\n  private SET_INSTANCE_DEPENDENCY: any;\n  @Action('rocketTopo/CLEAR_TOPO_INFO') private CLEAR_TOPO_INFO: any;\n  @Action('rocketTopo/GET_TOPO_INSTANCE_DEPENDENCY')\n  private GET_INSTANCE_DEPENDENCY: any;\n  @Action('rocketTopo/GET_TOPO_SERVICE_DETAIL') private GET_TOPO_SERVICE_DETAIL: any;\n\n  private isMini: boolean = true;\n  private showInfoCount: number = 0;\n  private showInfo: boolean = false;\n  private dialogTopoVisible = false;\n\n  private get showServerInfo() {\n    return this.stateTopo.currentNode.name && this.stateTopo.currentNode.isReal;\n  }\n\n  @Watch('stateTopo.selectedServiceCall')\n  private watchDetectPointNodeId(newValue: string) {\n    if (newValue || this.stateTopo.currentNode.isReal) {\n      this.showInfo = true;\n    } else {\n      this.showInfo = false;\n      this.showInfoCount = 0;\n      this.isMini = true;\n    }\n  }\n\n  @Watch('stateTopo.currentNode.name')\n  private watchCurrentNodeIsReal(newValue: boolean) {\n    const service = this.stateTopo.currentNode;\n    if (this.stateTopo.currentNode.isReal) {\n      this.MIXHANDLE_CHANGE_GROUP_WITH_CURRENT({ index: 0, current: 1 });\n      this.MIXHANDLE_GET_OPTION({\n        compType: 'service',\n        duration: this.durationTime,\n      }).then(() => {\n        this.GET_TOPO_SERVICE_DETAIL({\n          serviceId: service.id || '',\n          duration: this.durationTime,\n        });\n      });\n    }\n    if (newValue || this.stateTopo.selectedServiceCall) {\n      this.showInfo = true;\n    } else {\n      this.showInfo = false;\n      this.showInfoCount = 0;\n      this.isMini = true;\n    }\n  }\n\n  private setShowInfo() {\n    this.showInfo = false;\n    this.showInfoCount = 1;\n    this.isMini = !this.isMini;\n    setTimeout(() => {\n      this.showInfo = true;\n    }, 550);\n  }\n\n  private setMode(mode: boolean) {\n    this.SET_MODE_STATUS(mode);\n    this.stateTopo.callback();\n  }\n\n  private clearInstance() {\n    this.dialogTopoVisible = false;\n    this.SET_SELECTED_INSTANCE_CALL(null);\n  }\n\n  private openInstanceModal() {\n    this.dialogTopoVisible = true;\n    if (!(this.stateTopo.selectedServiceCall && this.stateTopo.selectedServiceCall.source)) {\n      return;\n    }\n    this.GET_INSTANCE_DEPENDENCY({\n      serverServiceId: this.stateTopo.selectedServiceCall.source.id,\n      clientServiceId: this.stateTopo.selectedServiceCall.target.id,\n      duration: this.durationTime,\n    });\n  }\n}\n",{"version":3,"sources":["topo-detect-point.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"topo-detect-point.vue","sourceRoot":"src/views/components/topology","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div\n    v-if=\"stateTopo.selectedServiceCall || showServerInfo\"\n    :class=\"`link-topo-aside-box link-topo-aside-box-${isMini ? 'min' : 'max'}`\"\n    :style=\"`top:55px;position: fixed;right: 30px;${showInfoCount === 0 ? 'animation: unset;' : ''}`\"\n  >\n    <svg\n      :style=\"`position:absolute;left:-48px;top:0;transform: rotate(${isMini ? 0 : 180}deg);`\"\n      class=\"link-topo-aside-btn icon cp lg\"\n      @click=\"setShowInfo\"\n    >\n      <use xlink:href=\"#chevron-left\" />\n    </svg>\n    <div class=\"mb-5 clear\">\n      <div v-if=\"stateTopo.selectedServiceCall\">\n        <span class=\"b dib mr-20 vm\">{{ $t('detectPoint') }}</span>\n        <span\n          v-if=\"stateTopo.detectPoints.indexOf('CLIENT') !== -1\"\n          :class=\"{ active: !stateTopo.mode }\"\n          class=\"link-topo-aside-box-btn tc r sm cp b\"\n          @click=\"setMode(false)\"\n          >{{ this.$t('client') }}</span\n        >\n        <span\n          v-if=\"stateTopo.detectPoints.indexOf('SERVER') !== -1\"\n          :class=\"{ active: stateTopo.mode }\"\n          class=\"link-topo-aside-box-btn tc r sm cp b\"\n          @click=\"setMode(true)\"\n          >{{ this.$t('server') }}</span\n        >\n      </div>\n      <span v-else-if=\"showServerInfo\" class=\"b dib mr-20 vm\">{{ $t('serviceDetail') }}</span>\n    </div>\n    <div v-if=\"showInfo\">\n      <div v-if=\"stateTopo.selectedServiceCall\">\n        <TopoChart\n          v-if=\"stateTopo.getResponseTimeTrend.length\"\n          :data=\"stateTopo.getResponseTimeTrend\"\n          :intervalTime=\"intervalTime\"\n          :title=\"$t('avgResponseTime')\"\n          unit=\"ms\"\n        />\n        <TopoChart\n          v-if=\"stateTopo.getThroughputTrend.length\"\n          :data=\"stateTopo.getThroughputTrend\"\n          :intervalTime=\"intervalTime\"\n          :title=\"$t('avgThroughput')\"\n          unit=\"cpm\"\n        />\n        <TopoChart\n          v-if=\"stateTopo.getSLATrend.length\"\n          :data=\"stateTopo.getSLATrend\"\n          :intervalTime=\"intervalTime\"\n          :precent=\"true\"\n          :title=\"$t('avgSLA')\"\n          unit=\"%\"\n        />\n        <ChartLine\n          v-if=\"stateTopo.responsePercentile\"\n          :data=\"stateTopo.responsePercentile\"\n          :intervalTime=\"intervalTime\"\n          :title=\"$t('percentResponse')\"\n        />\n      </div>\n      <div v-else-if=\"showServerInfo\">\n        <TopoChart\n          v-if=\"stateTopo.serviceResponseTime.length\"\n          :data=\"stateTopo.serviceResponseTime\"\n          :intervalTime=\"intervalTime\"\n          title=\"Service ResponseTime\"\n          unit=\"ms\"\n        />\n        <TopoChart\n          v-if=\"stateTopo.serviceThroughput.length\"\n          :data=\"stateTopo.serviceThroughput\"\n          :intervalTime=\"intervalTime\"\n          title=\"Service Throughput\"\n          unit=\"cpm\"\n        />\n        <ChartLine\n          v-if=\"stateTopo.servicePercentile.p50.length\"\n          :data=\"stateTopo.servicePercentile\"\n          :intervalTime=\"intervalTime\"\n          :title=\"$t('percentResponse')\"\n        />\n      </div>\n    </div>\n    <div class=\"show-dependency\" v-if=\"stateTopo.selectedServiceCall\">\n      <a class=\"rk-btn lg\" @click=\"openInstanceModal\">{{ $t('ShowInstanceDependency') }}</a>\n      <rk-sidebox\n        class=\"instance-dependency\"\n        width=\"80%\"\n        :fixed=\"true\"\n        :title=\"\n          `${stateTopo.selectedServiceCall.source.name} -> ${stateTopo.selectedServiceCall.target.name} Instance Dependency`\n        \"\n        :show.sync=\"dialogTopoVisible\"\n      >\n        <TopoInstanceDependency />\n      </rk-sidebox>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\n  import { State as topoState } from '@/store/modules/topology';\n  import { Component, Vue, Watch } from 'vue-property-decorator';\n  import { Action, Getter, Mutation, State } from 'vuex-class';\n  import TopoChart from './topo-chart.vue';\n  import TopoInstanceDependency from './topo-instance-dependency.vue';\n  import ChartLine from './chart-line.vue';\n\n  @Component({\n    components: {\n      TopoInstanceDependency,\n      TopoChart,\n      ChartLine,\n    },\n  })\n  export default class TopoDetectPoint extends Vue {\n    @State('rocketTopo') private stateTopo!: topoState;\n    @Getter('intervalTime') private intervalTime: any;\n    @Getter('durationTime') private durationTime: any;\n    @Action('MIXHANDLE_CHANGE_GROUP_WITH_CURRENT')\n    private MIXHANDLE_CHANGE_GROUP_WITH_CURRENT: any;\n    @Action('MIXHANDLE_GET_OPTION') private MIXHANDLE_GET_OPTION: any;\n    @Mutation('rocketTopo/SET_MODE_STATUS') private SET_MODE_STATUS: any;\n    @Mutation('rocketTopo/SET_SELECTED_INSTANCE_CALL')\n    private SET_SELECTED_INSTANCE_CALL: any;\n    @Mutation('rocketTopo/SET_INSTANCE_DEPENDENCY')\n    private SET_INSTANCE_DEPENDENCY: any;\n    @Action('rocketTopo/CLEAR_TOPO_INFO') private CLEAR_TOPO_INFO: any;\n    @Action('rocketTopo/GET_TOPO_INSTANCE_DEPENDENCY')\n    private GET_INSTANCE_DEPENDENCY: any;\n    @Action('rocketTopo/GET_TOPO_SERVICE_DETAIL') private GET_TOPO_SERVICE_DETAIL: any;\n\n    private isMini: boolean = true;\n    private showInfoCount: number = 0;\n    private showInfo: boolean = false;\n    private dialogTopoVisible = false;\n\n    private get showServerInfo() {\n      return this.stateTopo.currentNode.name && this.stateTopo.currentNode.isReal;\n    }\n\n    @Watch('stateTopo.selectedServiceCall')\n    private watchDetectPointNodeId(newValue: string) {\n      if (newValue || this.stateTopo.currentNode.isReal) {\n        this.showInfo = true;\n      } else {\n        this.showInfo = false;\n        this.showInfoCount = 0;\n        this.isMini = true;\n      }\n    }\n\n    @Watch('stateTopo.currentNode.name')\n    private watchCurrentNodeIsReal(newValue: boolean) {\n      const service = this.stateTopo.currentNode;\n      if (this.stateTopo.currentNode.isReal) {\n        this.MIXHANDLE_CHANGE_GROUP_WITH_CURRENT({ index: 0, current: 1 });\n        this.MIXHANDLE_GET_OPTION({\n          compType: 'service',\n          duration: this.durationTime,\n        }).then(() => {\n          this.GET_TOPO_SERVICE_DETAIL({\n            serviceId: service.id || '',\n            duration: this.durationTime,\n          });\n        });\n      }\n      if (newValue || this.stateTopo.selectedServiceCall) {\n        this.showInfo = true;\n      } else {\n        this.showInfo = false;\n        this.showInfoCount = 0;\n        this.isMini = true;\n      }\n    }\n\n    private setShowInfo() {\n      this.showInfo = false;\n      this.showInfoCount = 1;\n      this.isMini = !this.isMini;\n      setTimeout(() => {\n        this.showInfo = true;\n      }, 550);\n    }\n\n    private setMode(mode: boolean) {\n      this.SET_MODE_STATUS(mode);\n      this.stateTopo.callback();\n    }\n\n    private clearInstance() {\n      this.dialogTopoVisible = false;\n      this.SET_SELECTED_INSTANCE_CALL(null);\n    }\n\n    private openInstanceModal() {\n      this.dialogTopoVisible = true;\n      if (!(this.stateTopo.selectedServiceCall && this.stateTopo.selectedServiceCall.source)) {\n        return;\n      }\n      this.GET_INSTANCE_DEPENDENCY({\n        serverServiceId: this.stateTopo.selectedServiceCall.source.id,\n        clientServiceId: this.stateTopo.selectedServiceCall.target.id,\n        duration: this.durationTime,\n      });\n    }\n  }\n</script>\n<style lang=\"scss\">\n  .link-topo-aside-box-btn {\n    color: #626977;\n    border: 1px solid;\n    padding: 0px 3px;\n    width: 45px;\n    display: inline-block;\n\n    &.active {\n      color: #448dfe;\n    }\n  }\n\n  .show-dependency {\n    margin-top: 20px;\n\n    .rk-btn {\n      display: block;\n      text-align: center;\n    }\n\n    .instance-dependency {\n      .rk-sidebox {\n        background: #2b3037;\n        outline: none;\n      }\n      .rk-sidebox-inner {\n        height: 100%;\n      }\n    }\n\n    .title-name {\n      width: 100%;\n      padding-left: 40px;\n      font-size: 16px;\n    }\n  }\n\n  .link-topo-aside-box {\n    border-radius: 4px;\n    position: absolute;\n    width: 280px;\n    z-index: 101;\n    color: #ddd;\n    background-color: #2b3037;\n    padding: 15px 20px 10px;\n\n    .label {\n      display: inline-block;\n      width: 40%;\n    }\n\n    .content {\n      vertical-align: top;\n      display: inline-block;\n      width: 60%;\n    }\n\n    .circle {\n      width: 8px;\n      height: 8px;\n      border-radius: 4px;\n      background-color: #ee5b5b;\n      margin-top: 6px;\n    }\n  }\n\n  .link-topo-aside-box {\n    p {\n      margin-block-start: auto !important;\n      margin-block-end: auto !important;\n    }\n  }\n</style>\n"]}]}