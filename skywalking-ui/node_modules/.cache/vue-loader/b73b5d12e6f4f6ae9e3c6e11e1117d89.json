{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/charts/chart-edit.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/dashboard/charts/chart-edit.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.rk-chart-edit {\n  margin: 0 -10px;\n  height: 100%;\n  overflow: auto;\n  select {\n    margin: 0;\n    height: 30px;\n    border: 1px solid #ddd;\n    background-color: #fff;\n    outline: none;\n  }\n}\n\n.rk-chart-edit-container {\n  padding: 7px 5px;\n  border: 1px dashed rgba(196, 200, 225, 0.5);\n  border-radius: 4px;\n  height: 100%;\n  .title {\n    width: 120px;\n    flex-shrink: 0;\n  }\n}\n.rk-chart-edit-input {\n  border: 0;\n  outline: 0;\n  padding: 4px 10px;\n  border-radius: 3px;\n  border: 1px solid #ddd;\n}\n",{"version":3,"sources":["chart-edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"chart-edit.vue","sourceRoot":"src/views/components/dashboard/charts","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n\n<template>\n  <div class=\"rk-chart-edit\">\n    <div class=\"rk-chart-edit-container\">\n      <div class=\"flex-h mb-5\">\n        <div class=\"title grey sm\">{{ $t('title') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.title\"\n          @change=\"setItemConfig({ type: 'title', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h mb-5\">\n        <div class=\"title grey sm\">{{ $t('metrics') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.metricName\"\n          @change=\"setItemConfig({ type: 'metricName', value: $event.target.value })\"\n        />\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.queryMetricType\"\n          @change=\"setItemConfig({ type: 'queryMetricType', value: $event.target.value })\"\n        >\n          <option v-for=\"query in queryMetricTypesList\" :value=\"query.value\" :key=\"query.value\">{{\n            query.label\n          }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"isLabel\">\n        <div class=\"title grey sm\">{{ $t('labels') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.metricLabels\"\n          @change=\"setItemConfig({ type: 'metricLabels', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"isLabel\">\n        <div class=\"title grey sm\">{{ $t('labelsIndex') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.labelsIndex\"\n          @change=\"setItemConfig({ type: 'labelsIndex', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"!isDatabase && !pageTypes.includes(type)\">\n        <div class=\"title grey sm\">{{ $t('entityType') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.entityType\"\n          @change=\"setItemConfig({ type: 'entityType', value: $event.target.value })\"\n        >\n          <option v-for=\"type in EntityType\" :value=\"type.key\" :key=\"type.key\">{{ type.label }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"itemConfig.independentSelector && isDatabase\">\n        <div class=\"title grey sm\">{{ $t('currentDatabase') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.currentDatabase\"\n          @change=\"setItemConfig({ type: 'currentDatabase', value: $event.target.value })\"\n        >\n          <option v-for=\"database in stateDashboardOption.databases\" :value=\"database.label\" :key=\"database.key\">{{\n            database.label\n          }}</option>\n        </select>\n      </div>\n      <div\n        class=\"flex-h mb-5\"\n        v-show=\"itemConfig.entityType !== EntityType[1].key && itemConfig.independentSelector && !isDatabase\"\n      >\n        <div class=\"title grey sm\">{{ $t('currentService') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.servicesKey\"\n          @change=\"setItemConfig({ type: 'servicesKey', value: $event.target.value })\"\n        />\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.currentService\"\n          @change=\"setItemConfig({ type: 'currentService', value: $event.target.value })\"\n        >\n          <option v-for=\"service in services\" :value=\"service.label\" :key=\"service.key\">\n            {{ service.label }}\n          </option>\n        </select>\n      </div>\n      <div\n        class=\"flex-h mb-5\"\n        v-show=\"itemConfig.entityType === EntityType[2].key && itemConfig.independentSelector && !isDatabase\"\n      >\n        <div class=\"title grey sm\">{{ $t('currentEndpoint') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.endpointsKey\"\n          @change=\"setItemConfig({ type: 'endpointsKey', value: $event.target.value })\"\n        />\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.currentEndpoint\"\n          @change=\"setItemConfig({ type: 'currentEndpoint', value: $event.target.value })\"\n        >\n          <option v-for=\"endpoint in endpoints\" :value=\"endpoint.label\" :key=\"endpoint.key\">{{\n            endpoint.label\n          }}</option>\n        </select>\n      </div>\n      <div\n        class=\"flex-h mb-5\"\n        v-show=\"itemConfig.entityType === EntityType[3].key && itemConfig.independentSelector && !isDatabase\"\n      >\n        <div class=\"title grey sm\">{{ $t('currentInstance') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.instancesKey\"\n          @change=\"setItemConfig({ type: 'instancesKey', value: $event.target.value })\"\n        />\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.currentInstance\"\n          @change=\"setItemConfig({ type: 'currentInstance', value: $event.target.value })\"\n        >\n          <option v-for=\"instance in instances\" :value=\"instance.label\" :key=\"instance.key\">{{\n            instance.label\n          }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"!isIndependentSelector\">\n        <div class=\"title grey sm\">{{ $t('independentSelector') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.independentSelector\"\n          @change=\"setItemConfig({ type: 'independentSelector', value: $event.target.value })\"\n        >\n          <option v-for=\"type in IndependentType\" :value=\"type.key\" :key=\"type.key\">{{ type.label }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"nameMetrics.includes(itemConfig.queryMetricType)\">\n        <div class=\"title grey sm\">{{ $t('parentService') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.parentService\"\n          @change=\"setItemConfig({ type: 'parentService', value: $event.target.value })\"\n        >\n          <option :value=\"true\">{{ $t('isParentService') }}</option>\n          <option :value=\"false\">{{ $t('noneParentService') }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\" v-show=\"nameMetrics.includes(itemConfig.queryMetricType)\">\n        <div class=\"title grey sm\">{{ $t('sortOrder') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.sortOrder\"\n          @change=\"setItemConfig({ type: 'sortOrder', value: $event.target.value })\"\n        >\n          <option :value=\"'DES'\">{{ $t('descendOrder') }}</option>\n          <option :value=\"'ASC'\">{{ $t('increaseOrder') }}</option>\n        </select>\n      </div>\n      <div class=\"flex-h mb-5\">\n        <div class=\"title grey sm\">{{ $t('unit') }}:</div>\n        <input\n          type=\"text\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.unit\"\n          @change=\"setItemConfig({ type: 'unit', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h mb-5\">\n        <div class=\"title grey sm\">{{ $t('aggregation') }}:</div>\n        <select\n          class=\"long\"\n          v-model=\"itemConfig.aggregation\"\n          @change=\"setItemConfig({ type: 'aggregation', value: $event.target.value })\"\n        >\n          <option v-for=\"type in CalculationType\" :value=\"type.value\" :key=\"type.value\">{{ type.label }}</option>\n        </select>\n        <input\n          type=\"number\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.aggregationNum\"\n          @change=\"setItemConfig({ type: 'aggregationNum', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h mb-5\">\n        <div class=\"title grey sm\">{{ $t('width') }}:</div>\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"12\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.width\"\n          @change=\"setItemConfig({ type: 'width', value: $event.target.value })\"\n        />\n      </div>\n      <div class=\"flex-h\">\n        <div class=\"title grey sm\">{{ $t('height') }}:</div>\n        <input\n          type=\"number\"\n          min=\"1\"\n          class=\"rk-chart-edit-input long\"\n          :value=\"itemConfig.height\"\n          @change=\"setItemConfig({ type: 'height', value: $event.target.value })\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { State, Getter, Mutation, Action } from 'vuex-class';\n  import { Component, Prop } from 'vue-property-decorator';\n\n  import { TopologyType, ObjectsType } from '../../../constant';\n  import {\n    EntityType,\n    IndependentType,\n    MetricsType,\n    QueryMetricTypes,\n    MetricChartType,\n    CalculationType,\n  } from './constant';\n  import { DASHBOARDTYPE } from '../constant';\n\n  @Component\n  export default class ChartEdit extends Vue {\n    @State('rocketOption') private stateDashboardOption: any;\n    @State('rocketData') private rocketComps!: any;\n    @Mutation('EDIT_COMP_CONFIG') private EDIT_COMP_CONFIG: any;\n    @Mutation('rocketTopo/EDIT_TOPO_INSTANCE_CONFIG') private EDIT_TOPO_INSTANCE_CONFIG: any;\n    @Mutation('rocketTopo/EDIT_TOPO_ENDPOINT_CONFIG') private EDIT_TOPO_ENDPOINT_CONFIG: any;\n    @Action('GET_ITEM_SERVICES') private GET_ITEM_SERVICES: any;\n    @Action('GET_ITEM_ENDPOINTS') private GET_ITEM_ENDPOINTS: any;\n    @Action('GET_ITEM_INSTANCES') private GET_ITEM_INSTANCES: any;\n    @Action('TYPE_METRICS') private TYPE_METRICS: any;\n    @Getter('durationTime') private durationTime: any;\n    @Prop() private item!: any;\n    @Prop() private index!: number;\n    @Prop() private intervalTime!: any;\n    @Prop() private type!: string;\n    private itemConfig: any = {};\n    private EntityType = EntityType;\n    private IndependentType = IndependentType;\n    private CalculationType = CalculationType;\n    private services: any = [];\n    private endpoints: any = [];\n    private instances: any = [];\n    private queryMetricTypesList: any = [];\n    private isDatabase = false;\n    private isLabel = false;\n    private isIndependentSelector = false;\n    private nameMetrics = ['sortMetrics', 'readSampledRecords'];\n    private pageTypes = [TopologyType.TOPOLOGY_ENDPOINT, TopologyType.TOPOLOGY_INSTANCE] as any[];\n\n    private created() {\n      this.itemConfig = this.item;\n      this.isDatabase = this.pageTypes.includes(this.type)\n        ? false\n        : this.rocketComps.tree[this.rocketComps.group].type === DASHBOARDTYPE.DATABASE\n        ? true\n        : false;\n      this.queryMetricTypesList = QueryMetricTypes[this.item.metricType] || [];\n      this.isLabel = this.itemConfig.metricType === MetricsType.LABELED_VALUE ? true : false;\n      this.isIndependentSelector =\n        this.rocketComps.tree[this.rocketComps.group].type === 'metric' || this.pageTypes.includes(this.type);\n      if (!this.itemConfig.independentSelector || this.pageTypes.includes(this.type)) {\n        return;\n      }\n      this.setItemServices();\n    }\n\n    private setItemConfig(params: { type: string; value: string }) {\n      this.itemConfig[params.type] = params.value;\n      const types = ['endpointsKey', 'instancesKey', 'currentService'];\n      const typesUpdate = ['title', 'width', 'height', 'unit'];\n      if (params.type === 'servicesKey') {\n        this.setItemServices(true);\n      }\n      if (types.includes(params.type)) {\n        this.getServiceObject(true);\n      }\n      if (typesUpdate.includes(params.type)) {\n        this.$emit('updateStatus', params.type, params.value);\n      }\n      if (params.type === 'entityType') {\n        if (this.itemConfig.currentService) {\n          this.getServiceObject(true);\n        }\n      }\n      if (params.type === 'metricName') {\n        this.TYPE_METRICS({ name: params.value }).then((data: Array<{ typeOfMetrics: string }>) => {\n          if (!data.length) {\n            return;\n          }\n          if (data.length > 1) {\n            const length = data.filter((d: { typeOfMetrics: string }) => d.typeOfMetrics !== MetricsType.REGULAR_VALUE)\n              .length;\n            if (length) {\n              this.$emit('updateStatus', 'metricType', MetricsType.UNKNOWN);\n              return;\n            }\n          }\n          const { typeOfMetrics } = data[0];\n          this.$emit('updateStatus', 'metricType', typeOfMetrics);\n          this.queryMetricTypesList = QueryMetricTypes[typeOfMetrics] || [];\n          this.itemConfig.queryMetricType = this.queryMetricTypesList[0] && this.queryMetricTypesList[0].value;\n          this.isLabel = typeOfMetrics === MetricsType.LABELED_VALUE ? true : false;\n          const values = {\n            metricType: typeOfMetrics,\n            queryMetricType: this.itemConfig.queryMetricType,\n            chartType: MetricChartType[this.itemConfig.queryMetricType],\n            metricName: params.value,\n          };\n          if (this.type === this.pageTypes[0]) {\n            this.EDIT_TOPO_ENDPOINT_CONFIG({\n              index: this.index,\n              values,\n            });\n          } else if (this.type === this.pageTypes[1]) {\n            this.EDIT_TOPO_INSTANCE_CONFIG({\n              index: this.index,\n              values,\n            });\n          } else {\n            this.EDIT_COMP_CONFIG({\n              index: this.index,\n              values,\n            });\n          }\n          this.itemConfig = {\n            ...this.itemConfig,\n            ...values,\n          };\n        });\n        return;\n      }\n      if (params.type === 'queryMetricType') {\n        const values = {\n          chartType: MetricChartType[params.value],\n          [params.type]: params.value,\n        };\n        if (this.type === this.pageTypes[0]) {\n          this.EDIT_TOPO_ENDPOINT_CONFIG({\n            index: this.index,\n            values,\n          });\n        } else if (this.type === this.pageTypes[1]) {\n          this.EDIT_TOPO_INSTANCE_CONFIG({\n            index: this.index,\n            values,\n          });\n        } else {\n          this.EDIT_COMP_CONFIG({\n            index: this.index,\n            values,\n          });\n        }\n        this.itemConfig = {\n          ...this.itemConfig,\n          ...values,\n        };\n        return;\n      }\n      if (params.type === 'independentSelector' || params.type === 'parentService') {\n        this.itemConfig[params.type] = params.value === 'true' ? true : false;\n        if (this.type === this.pageTypes[0]) {\n          this.EDIT_TOPO_ENDPOINT_CONFIG({\n            index: this.index,\n            values: { [params.type]: this.itemConfig[params.type] },\n          });\n        } else if (this.type === this.pageTypes[1]) {\n          this.EDIT_TOPO_INSTANCE_CONFIG({\n            index: this.index,\n            values: { [params.type]: this.itemConfig[params.type] },\n          });\n        } else {\n          this.EDIT_COMP_CONFIG({ index: this.index, values: { [params.type]: this.itemConfig[params.type] } });\n        }\n\n        return;\n      }\n      if (this.type === this.pageTypes[0]) {\n        this.EDIT_TOPO_ENDPOINT_CONFIG({\n          index: this.index,\n          values: { [params.type]: params.value },\n        });\n      } else if (this.type === this.pageTypes[1]) {\n        this.EDIT_TOPO_INSTANCE_CONFIG({\n          index: this.index,\n          values: { [params.type]: params.value },\n        });\n      } else {\n        this.EDIT_COMP_CONFIG({ index: this.index, values: { [params.type]: params.value } });\n      }\n    }\n\n    private setItemServices(update: boolean = false) {\n      this.GET_ITEM_SERVICES({ keyword: this.itemConfig.servicesKey || '', duration: this.durationTime }).then(\n        (result: Array<{ label: string; key: string }>) => {\n          this.services = result;\n          if (update) {\n            if (result.length) {\n              this.itemConfig.currentService = result[0].key;\n            } else {\n              this.itemConfig.currentService = '';\n            }\n          }\n          if (this.itemConfig.currentService) {\n            this.getServiceObject();\n          }\n        },\n      );\n    }\n\n    private getServiceObject(update: boolean = false) {\n      const service =\n        this.services.filter((d: { key: string; label: string }) => d.label === this.itemConfig.currentService)[0] ||\n        {};\n      const serviceId = service.key;\n\n      if (!serviceId) {\n        return;\n      }\n      if (this.itemConfig.entityType === EntityType[2].key) {\n        this.GET_ITEM_ENDPOINTS({\n          serviceId,\n          keyword: this.itemConfig.endpointsKey || '',\n          duration: this.durationTime,\n        }).then((data: Array<{ key: string; label: string }>) => {\n          this.endpoints = data;\n          if (update) {\n            if (data.length) {\n              this.itemConfig.currentEndpoint = data[0].key;\n            } else {\n              this.itemConfig.currentEndpoint = '';\n            }\n            this.EDIT_COMP_CONFIG({ index: this.index, values: { currentEndpoint: this.itemConfig.currentEndpoint } });\n          }\n        });\n      } else if (this.itemConfig.entityType === EntityType[3].key) {\n        this.GET_ITEM_INSTANCES({\n          serviceId,\n          keyword: this.itemConfig.instancesKey || '',\n          duration: this.durationTime,\n        }).then((data: Array<{ key: string; label: string }>) => {\n          this.instances = data;\n          if (update) {\n            if (data.length) {\n              this.itemConfig.currentInstance = data[0].key;\n            } else {\n              this.itemConfig.currentInstance = '';\n            }\n            this.EDIT_COMP_CONFIG({ index: this.index, values: { currentInstance: this.itemConfig.currentInstance } });\n          }\n        });\n      }\n    }\n  }\n</script>\n<style lang=\"scss\">\n  .rk-chart-edit {\n    margin: 0 -10px;\n    height: 100%;\n    overflow: auto;\n    select {\n      margin: 0;\n      height: 30px;\n      border: 1px solid #ddd;\n      background-color: #fff;\n      outline: none;\n    }\n  }\n\n  .rk-chart-edit-container {\n    padding: 7px 5px;\n    border: 1px dashed rgba(196, 200, 225, 0.5);\n    border-radius: 4px;\n    height: 100%;\n    .title {\n      width: 120px;\n      flex-shrink: 0;\n    }\n  }\n  .rk-chart-edit-input {\n    border: 0;\n    outline: 0;\n    padding: 4px 10px;\n    border-radius: 3px;\n    border: 1px solid #ddd;\n  }\n</style>\n"]}]}