{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/trace/trace-detail-chart-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/trace/trace-detail-chart-list.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport _toConsumableArray from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _Set from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/set\";\nimport _Array$from from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/array/from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport copy from '@/utils/copy';\nimport * as d3 from 'd3';\nimport Trace from './d3-trace';\nimport _ from 'lodash';\nexport default {\n  props: ['data', 'traceId'],\n  data: function data() {\n    return {\n      segmentId: [],\n      showDetail: false,\n      list: [],\n      currentSpan: [],\n      loading: true\n    };\n  },\n  watch: {\n    data: function data() {\n      var _this = this;\n\n      if (!this.data.length) {\n        return;\n      }\n\n      this.loading = true;\n      this.changeTree();\n      this.tree.init({\n        label: 'TRACE_ROOT',\n        children: this.segmentId\n      }, this.data);\n      this.tree.draw(function () {\n        setTimeout(function () {\n          _this.loading = false;\n        }, 200);\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    d3.selectAll('.d3-tip').remove();\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.$eventBus.$on('TRACE-LIST-LOADING', this, function () {\n      _this2.loading = true;\n    }); // this.loading = true;\n\n    this.changeTree();\n    this.tree = new Trace(this.$refs.traceList, this);\n    this.tree.init({\n      label: 'TRACE_ROOT',\n      children: this.segmentId\n    }, this.data);\n    this.tree.draw();\n    this.loading = false; // this.computedScale();\n  },\n  methods: {\n    copy: copy,\n    handleSelectSpan: function handleSelectSpan(i) {\n      this.currentSpan = i.data;\n      this.showDetail = true;\n    },\n    traverseTree: function traverseTree(node, spanId, segmentId, data) {\n      var _this3 = this;\n\n      if (!node) {\n        return;\n      }\n\n      if (node.spanId === spanId && node.segmentId === segmentId) {\n        node.children.push(data);\n        return;\n      }\n\n      if (node.children && node.children.length > 0) {\n        node.children.forEach(function (nodeItem) {\n          _this3.traverseTree(nodeItem, spanId, segmentId, data);\n        });\n      }\n    },\n    computedScale: function computedScale(i) {\n      // Rainbow map\n      var sequentialScale = d3.scaleSequential().domain([0, this.list.length + 1]).interpolator(d3.interpolateCool);\n      return sequentialScale(i);\n    },\n    changeTree: function changeTree() {\n      var _this4 = this;\n\n      if (this.data.length === 0) {\n        return [];\n      }\n\n      this.list = _Array$from(new _Set(this.data.map(function (i) {\n        return i.serviceCode;\n      })));\n      this.segmentId = [];\n      var segmentGroup = {};\n      var segmentIdGroup = [];\n      var fixSpans = [];\n      var segmentHeaders = [];\n      this.data.forEach(function (span) {\n        if (span.parentSpanId === -1) {\n          segmentHeaders.push(span);\n        } else {\n          var index = _this4.data.findIndex(function (i) {\n            return i.segmentId === span.segmentId && i.spanId === span.spanId - 1;\n          });\n\n          var fixSpanKeyContent = {\n            traceId: span.traceId,\n            segmentId: span.segmentId,\n            spanId: span.spanId - 1,\n            parentSpanId: span.spanId - 2\n          };\n\n          if (index === -1 && !_.find(fixSpans, fixSpanKeyContent)) {\n            fixSpans.push(_objectSpread({}, fixSpanKeyContent, {\n              refs: [],\n              endpointName: \"VNode: \".concat(span.segmentId),\n              serviceCode: 'VirtualNode',\n              type: \"[Broken] \".concat(span.type),\n              peer: '',\n              component: \"VirtualNode: #\".concat(span.spanId - 1),\n              isError: true,\n              isBroken: true,\n              layer: 'Broken',\n              tags: [],\n              logs: []\n            }));\n          }\n        }\n      });\n      segmentHeaders.forEach(function (span) {\n        if (span.refs.length) {\n          span.refs.forEach(function (ref) {\n            var index = _this4.data.findIndex(function (i) {\n              return ref.parentSegmentId === i.segmentId && ref.parentSpanId === i.spanId;\n            });\n\n            if (index === -1) {\n              // create a known broken node.\n              var i = ref.parentSpanId;\n              var fixSpanKeyContent = {\n                traceId: ref.traceId,\n                segmentId: ref.parentSegmentId,\n                spanId: i,\n                parentSpanId: i > -1 ? 0 : -1\n              };\n\n              if (!_.find(fixSpans, fixSpanKeyContent)) {\n                fixSpans.push(_objectSpread({}, fixSpanKeyContent, {\n                  refs: [],\n                  endpointName: \"VNode: \".concat(ref.parentSegmentId),\n                  serviceCode: 'VirtualNode',\n                  type: \"[Broken] \".concat(ref.type),\n                  peer: '',\n                  component: \"VirtualNode: #\".concat(i),\n                  isError: true,\n                  isBroken: true,\n                  layer: 'Broken',\n                  tags: [],\n                  logs: []\n                }));\n              } // if root broken node is not exist, create a root broken node.\n\n\n              if (fixSpanKeyContent.parentSpanId > -1) {\n                var fixRootSpanKeyContent = {\n                  traceId: ref.traceId,\n                  segmentId: ref.parentSegmentId,\n                  spanId: 0,\n                  parentSpanId: -1\n                };\n\n                if (!_.find(fixSpans, fixRootSpanKeyContent)) {\n                  fixSpans.push(_objectSpread({}, fixRootSpanKeyContent, {\n                    refs: [],\n                    endpointName: \"VNode: \".concat(ref.parentSegmentId),\n                    serviceCode: 'VirtualNode',\n                    type: \"[Broken] \".concat(ref.type),\n                    peer: '',\n                    component: \"VirtualNode: #0\",\n                    isError: true,\n                    isBroken: true,\n                    layer: 'Broken',\n                    tags: [],\n                    logs: []\n                  }));\n                }\n              }\n            }\n          });\n        }\n      });\n      [].concat(fixSpans, _toConsumableArray(this.data)).forEach(function (i) {\n        i.label = i.endpointName || 'no operation name';\n        i.children = [];\n\n        if (segmentGroup[i.segmentId] === undefined) {\n          segmentIdGroup.push(i.segmentId);\n          segmentGroup[i.segmentId] = [];\n          segmentGroup[i.segmentId].push(i);\n        } else {\n          segmentGroup[i.segmentId].push(i);\n        }\n      });\n      segmentIdGroup.forEach(function (id) {\n        var currentSegment = segmentGroup[id].sort(function (a, b) {\n          return b.parentSpanId - a.parentSpanId;\n        });\n        currentSegment.forEach(function (s) {\n          var index = currentSegment.findIndex(function (i) {\n            return i.spanId === s.parentSpanId;\n          });\n\n          if (index !== -1) {\n            if (currentSegment[index].isBroken && currentSegment[index].parentSpanId === -1 || !currentSegment[index].isBroken) {\n              currentSegment[index].children.push(s);\n              currentSegment[index].children.sort(function (a, b) {\n                return a.spanId - b.spanId;\n              });\n            }\n          }\n\n          if (s.isBroken) {\n            var children = _.filter(_this4.data, function (span) {\n              return _.find(span.refs, {\n                traceId: s.traceId,\n                parentSegmentId: s.segmentId,\n                parentSpanId: s.spanId\n              });\n            });\n\n            if (children.length > 0) {\n              var _s$children;\n\n              (_s$children = s.children).push.apply(_s$children, _toConsumableArray(children));\n            }\n          }\n        });\n        segmentGroup[id] = currentSegment[currentSegment.length - 1];\n      });\n      segmentIdGroup.forEach(function (id) {\n        segmentGroup[id].refs.forEach(function (ref) {\n          if (ref.traceId === _this4.traceId) {\n            _this4.traverseTree(segmentGroup[ref.parentSegmentId], ref.parentSpanId, ref.parentSegmentId, segmentGroup[id]);\n          }\n        });\n      });\n\n      for (var i in segmentGroup) {\n        if (segmentGroup[i].refs.length === 0) {\n          this.segmentId.push(segmentGroup[i]);\n        }\n      }\n\n      this.segmentId.forEach(function (i) {\n        _this4.collapse(i);\n      });\n    },\n    collapse: function collapse(d) {\n      var _this5 = this;\n\n      if (d.children) {\n        var dur = d.endTime - d.startTime;\n        d.children.forEach(function (i) {\n          dur -= i.endTime - i.startTime;\n        });\n        d.dur = dur < 0 ? 0 : dur;\n        d.children.forEach(function (i) {\n          return _this5.collapse(i);\n        });\n      }\n    },\n    showCurrentSpanDetail: function showCurrentSpanDetail(title, text) {\n      var _this6 = this;\n\n      var textLineNumber = text.split('\\n').length;\n      var textHeight = textLineNumber * 20.2 + 10;\n      var tmpHeight = window.innerHeight * 0.9;\n      textHeight = textHeight >= tmpHeight ? tmpHeight : textHeight;\n      this.$modal.show('dialog', {\n        title: title,\n        text: \"<div style=\\\"height:\".concat(textHeight, \"px\\\">\").concat(text, \"</div>\"),\n        buttons: [{\n          title: 'Copy',\n          handler: function handler() {\n            _this6.copy(text);\n          }\n        }, {\n          title: 'Close'\n        }]\n      });\n    },\n    downloadTrace: function downloadTrace() {\n      var serializer = new XMLSerializer();\n      var svgNode = d3.select('.trace-list-dowanload').node();\n      var source = \"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\\r\\n\".concat(serializer.serializeToString(svgNode));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = d3.select('.trace-list-dowanload')._groups[0][0].clientWidth;\n      canvas.height = d3.select('.trace-list-dowanload')._groups[0][0].clientHeight;\n      context.fillStyle = '#fff';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      var image = new Image();\n      image.src = \"data:image/svg+xml;charset=utf-8,\".concat(encodeURIComponent(source));\n\n      image.onload = function () {\n        context.drawImage(image, 0, 0);\n        var tagA = document.createElement('a');\n        tagA.download = 'trace-list.png';\n        tagA.href = canvas.toDataURL('image/png');\n        tagA.click();\n      };\n    }\n  }\n};",{"version":3,"sources":["trace-detail-chart-list.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div class=\"time-charts scroll_hide\">\n    <div class=\"rk-trace-t-loading\" v-show=\"loading\">\n      <svg class=\"icon loading\">\n        <use xlink:href=\"#spinner\"></use>\n      </svg>\n    </div>\n    <transition-group name=\"fade\" tag=\"a\" class=\"mb-5\">\n      <span class=\"time-charts-item mr-10\" v-for=\"(i, index) in list\" :key=\"i\" :style=\"`color:${computedScale(index)}`\">\n        <svg class=\"icon vm mr-5 sm\">\n          <use xlink:href=\"#issue-open-m\"></use>\n        </svg>\n        <span>{{ i }}</span>\n      </span>\n    </transition-group>\n    <a class=\"rk-btn r vm  tc\" @click=\"downloadTrace\">{{ $t('exportImage') }}</a>\n    <rk-sidebox :width=\"'50%'\" :show.sync=\"showDetail\" :title=\"$t('spanInfo')\">\n      <div class=\"rk-trace-detail\">\n        <h5 class=\"mb-15\">{{ $t('tags') }}.</h5>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('endpoint') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.label }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('spanType') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.type }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('component') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.component }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">Peer:</span><span class=\"g-sm-8 wba\">{{ this.currentSpan.peer || 'No Peer' }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('error') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.isError }}</span>\n        </div>\n        <div class=\"mb-10 clear\" v-for=\"i in this.currentSpan.tags\" :key=\"i.key\">\n          <span class=\"g-sm-4 grey\">{{ i.key }}:</span>\n          <span class=\"g-sm-8 wba\">\n            {{ i.value }}\n            <svg v-if=\"i.key === 'db.statement'\" class=\"icon vm grey link-hover cp ml-5\" @click=\"copy(i.value)\">\n              <use xlink:href=\"#review-list\"></use>\n            </svg>\n          </span>\n        </div>\n        <h5 class=\"mb-10\" v-if=\"this.currentSpan.logs\" v-show=\"this.currentSpan.logs.length\">{{ $t('logs') }}.</h5>\n        <div v-for=\"(i, index) in this.currentSpan.logs\" :key=\"index\">\n          <div class=\"mb-10 sm\">\n            <span class=\"mr-10\">{{ $t('time') }}:</span><span class=\"grey\">{{ i.time | dateformat }}</span>\n          </div>\n          <div class=\"mb-15 clear\" v-for=\"(_i, _index) in i.data\" :key=\"_index\">\n            <div class=\"mb-10\">\n              {{ _i.key }}:<span\n                v-if=\"_i.key === 'stack'\"\n                class=\"r rk-sidebox-magnify\"\n                @click=\"showCurrentSpanDetail(_i.key, _i.value)\"\n              >\n                <svg class=\"icon\">\n                  <use xlink:href=\"#magnify\"></use>\n                </svg>\n              </span>\n            </div>\n            <pre class=\"pl-15 mt-0 mb-0 sm oa\">{{ _i.value }}</pre>\n          </div>\n        </div>\n      </div>\n    </rk-sidebox>\n    <v-dialog width=\"90%\" />\n    <div class=\"trace-list\">\n      <div ref=\"traceList\"></div>\n    </div>\n  </div>\n</template>\n<script lang=\"js\">\n  import copy from '@/utils/copy';\n  import * as d3 from 'd3';\n  import Trace from './d3-trace';\n  import _ from 'lodash';\n  export default {\n    props: ['data', 'traceId'],\n    data() {\n      return {\n        segmentId: [],\n        showDetail: false,\n        list: [],\n        currentSpan: [],\n        loading: true,\n      };\n    },\n    watch: {\n      data() {\n        if (!this.data.length) { return; }\n        this.loading = true;\n        this.changeTree();\n        this.tree.init({label: 'TRACE_ROOT', children: this.segmentId}, this.data);\n        this.tree.draw(() => {\n          setTimeout(() => {\n            this.loading = false;\n          }, 200);\n        });\n      },\n    },\n    beforeDestroy() {\n      d3.selectAll('.d3-tip').remove();\n    },\n    mounted() {\n      this.$eventBus.$on('TRACE-LIST-LOADING', this, () => { this.loading = true; });\n      // this.loading = true;\n      this.changeTree();\n      this.tree = new Trace(this.$refs.traceList, this);\n      this.tree.init({label: 'TRACE_ROOT', children: this.segmentId}, this.data);\n      this.tree.draw();\n      this.loading = false;\n      // this.computedScale();\n    },\n    methods: {\n      copy,\n      handleSelectSpan(i) {\n        this.currentSpan = i.data;\n        this.showDetail = true;\n      },\n      traverseTree(node, spanId, segmentId, data) {\n        if (!node) { return; }\n        if (node.spanId === spanId && node.segmentId === segmentId) {\n          node.children.push(data);\n          return;\n        }\n        if (node.children && node.children.length > 0) {\n          node.children.forEach((nodeItem) => {\n            this.traverseTree(nodeItem, spanId, segmentId, data);\n          });\n        }\n      },\n      computedScale(i) {\n         // Rainbow map\n        const sequentialScale = d3.scaleSequential()\n        .domain([0, this.list.length + 1])\n        .interpolator(d3.interpolateCool);\n        return sequentialScale(i);\n      },\n      changeTree() {\n        if (this.data.length === 0) {\n          return [];\n        }\n        this.list = Array.from(new Set(this.data.map((i) => i.serviceCode)));\n        this.segmentId = [];\n        const segmentGroup = {};\n        const segmentIdGroup = [];\n        const fixSpans = [];\n        const segmentHeaders = [];\n        this.data.forEach((span) => {\n          if (span.parentSpanId === -1) {\n            segmentHeaders.push(span);\n          } else {\n            const index = this.data.findIndex((i) => (\n              i.segmentId === span.segmentId\n              &&\n              i.spanId === (span.spanId - 1)\n            ));\n            const fixSpanKeyContent = {\n              traceId: span.traceId,\n              segmentId: span.segmentId,\n              spanId: span.spanId - 1,\n              parentSpanId: span.spanId - 2,\n            };\n            if (index === -1 && !_.find(fixSpans, fixSpanKeyContent)) {\n              fixSpans.push(\n                {\n                  ...fixSpanKeyContent,\n                  refs: [],\n                  endpointName: `VNode: ${span.segmentId}`,\n                  serviceCode: 'VirtualNode',\n                  type: `[Broken] ${span.type}`,\n                  peer: '',\n                  component: `VirtualNode: #${span.spanId - 1}`,\n                  isError: true,\n                  isBroken: true,\n                  layer: 'Broken',\n                  tags: [],\n                  logs: [],\n                },\n              );\n            }\n          }\n        });\n        segmentHeaders.forEach((span) => {\n          if (span.refs.length) {\n            span.refs.forEach((ref) => {\n              const index = this.data.findIndex((i) => (\n                ref.parentSegmentId === i.segmentId\n                &&\n                ref.parentSpanId === i.spanId\n              ));\n              if (index === -1) {\n                // create a known broken node.\n                const i = ref.parentSpanId;\n                const fixSpanKeyContent = {\n                  traceId: ref.traceId,\n                  segmentId: ref.parentSegmentId,\n                  spanId: i,\n                  parentSpanId: i > -1 ? 0 : -1,\n                };\n                if (!_.find(fixSpans, fixSpanKeyContent)) {\n                  fixSpans.push({\n                      ...fixSpanKeyContent, refs: [], endpointName: `VNode: ${ref.parentSegmentId}`,\n                    serviceCode: 'VirtualNode', type: `[Broken] ${ref.type}`, peer: '', component: `VirtualNode: #${i}`,\n                    isError: true, isBroken: true, layer: 'Broken', tags: [], logs: [],\n                  });\n                }\n                // if root broken node is not exist, create a root broken node.\n                if (fixSpanKeyContent.parentSpanId > -1) {\n                  const fixRootSpanKeyContent = {\n                    traceId: ref.traceId,\n                    segmentId: ref.parentSegmentId,\n                    spanId: 0,\n                    parentSpanId: -1,\n                  };\n                  if (!_.find(fixSpans, fixRootSpanKeyContent)) {\n                    fixSpans.push({\n                      ...fixRootSpanKeyContent,\n                      refs: [],\n                      endpointName: `VNode: ${ref.parentSegmentId}`,\n                      serviceCode: 'VirtualNode',\n                      type: `[Broken] ${ref.type}`,\n                      peer: '',\n                      component: `VirtualNode: #0`,\n                      isError: true,\n                      isBroken: true,\n                      layer: 'Broken',\n                      tags: [],\n                      logs: [],\n                    });\n                  }\n                }\n              }\n            });\n          }\n        });\n        [...fixSpans, ...this.data].forEach((i) => {\n          i.label = i.endpointName || 'no operation name';\n          i.children = [];\n          if (segmentGroup[i.segmentId] === undefined) {\n            segmentIdGroup.push(i.segmentId);\n            segmentGroup[i.segmentId] = [];\n            segmentGroup[i.segmentId].push(i);\n          } else {\n            segmentGroup[i.segmentId].push(i);\n          }\n        });\n        segmentIdGroup.forEach((id) => {\n          const currentSegment = segmentGroup[id].sort((a, b) => b.parentSpanId - a.parentSpanId);\n          currentSegment.forEach((s) => {\n            const index = currentSegment.findIndex((i) => i.spanId === s.parentSpanId);\n            if (index !== -1) {\n              if (\n                (currentSegment[index].isBroken && currentSegment[index].parentSpanId === -1)\n                ||\n                !currentSegment[index].isBroken\n              ) {\n                currentSegment[index].children.push(s);\n                currentSegment[index].children.sort((a, b) => a.spanId - b.spanId);\n              }\n            }\n            if (s.isBroken) {\n              const children = _.filter(this.data, (span) => {\n                return _.find(span.refs, {traceId: s.traceId, parentSegmentId: s.segmentId, parentSpanId: s.spanId});\n              });\n              if (children.length > 0) {\n                s.children.push(...children);\n              }\n            }\n          });\n          segmentGroup[id] = currentSegment[currentSegment.length - 1];\n        });\n        segmentIdGroup.forEach((id) => {\n          segmentGroup[id].refs.forEach((ref) => {\n            if (ref.traceId === this.traceId) {\n              this.traverseTree(\n                segmentGroup[ref.parentSegmentId],\n                ref.parentSpanId,\n                ref.parentSegmentId,\n                segmentGroup[id]);\n            }\n          });\n        });\n        for (const i in segmentGroup) {\n          if (segmentGroup[i].refs.length === 0 ) {\n            this.segmentId.push(segmentGroup[i]);\n          }\n        }\n        this.segmentId.forEach((i) => {\n          this.collapse(i);\n        });\n      },\n      collapse(d) {\n        if (d.children) {\n          let dur = d.endTime - d.startTime;\n          d.children.forEach((i) => {\n            dur -= (i.endTime - i.startTime);\n          });\n          d.dur = dur < 0 ? 0 : dur;\n          d.children.forEach((i) => this.collapse(i));\n        }\n      },\n      showCurrentSpanDetail(title, text) {\n        const textLineNumber = text.split('\\n').length;\n        let textHeight = textLineNumber * 20.2 + 10;\n        const tmpHeight = window.innerHeight * 0.9;\n        textHeight = textHeight >= tmpHeight ? tmpHeight : textHeight;\n        this.$modal.show('dialog', {\n          title,\n          text: `<div style=\"height:${textHeight}px\">${text}</div>`,\n          buttons: [\n            {\n              title: 'Copy',\n              handler: () => {\n                this.copy(text);\n              },\n            },\n            {\n              title: 'Close',\n            },\n          ],\n        });\n      },\n      downloadTrace() {\n        const serializer = new XMLSerializer();\n        const svgNode = d3.select('.trace-list-dowanload').node();\n        const source = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n${serializer.serializeToString(svgNode)}`;\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        canvas.width = d3.select('.trace-list-dowanload')._groups[0][0].clientWidth;\n        canvas.height = d3.select('.trace-list-dowanload')._groups[0][0].clientHeight;\n        context.fillStyle = '#fff';\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        const image = new Image();\n        image.src = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(source)}`;\n        image.onload = () => {\n          context.drawImage(image, 0, 0);\n          const tagA = document.createElement('a');\n          tagA.download = 'trace-list.png';\n          tagA.href = canvas.toDataURL('image/png');\n          tagA.click();\n        };\n      },\n    },\n  };\n</script>\n<style lang=\"scss\">\n  .time-charts {\n    overflow: auto;\n    padding: 10px 30px;\n    position: relative;\n    min-height: 150px;\n  }\n  .trace-node .group {\n    cursor: pointer;\n    fill-opacity: 0;\n  }\n  .trace-node-container {\n    fill: rgba(0, 0, 0, 0);\n    stroke-width: 5px;\n    cursor: pointer;\n    &:hover {\n      fill: rgba(0, 0, 0, 0.05);\n    }\n  }\n  .trace-node .node-text {\n    font: 12.5px sans-serif;\n    pointer-events: none;\n  }\n  .domain {\n    display: none;\n  }\n  .time-charts-item {\n    display: inline-block;\n    padding: 2px 8px;\n    border: 1px solid;\n    font-size: 11px;\n    border-radius: 4px;\n  }\n  .trace-list {\n    fill: rgba(0, 0, 0, 0);\n  }\n  .trace-list .trace-node rect {\n    &:hover {\n      fill: rgba(0, 0, 0, 0.05);\n    }\n  }\n  .dialog-c-text {\n    white-space: pre;\n    overflow: auto;\n    font-family: monospace;\n  }\n</style>\n"],"sourceRoot":"src/views/components/trace"}]}