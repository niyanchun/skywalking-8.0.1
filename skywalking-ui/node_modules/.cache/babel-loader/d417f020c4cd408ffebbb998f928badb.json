{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/trace/trace-detail-chart-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/views/components/trace/trace-detail-chart-tree.vue","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport _toConsumableArray from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Set from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/set\";\nimport _Array$from from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/array/from\";\nimport copy from '@/utils/copy';\nimport * as d3 from 'd3';\nimport Tree from './d3-trace-tree';\nimport _ from 'lodash';\n/* eslint-disable */\n\n/* tslint:disable */\n\nexport default {\n  props: ['data', 'traceId'],\n  data: function data() {\n    return {\n      segmentId: [],\n      showDetail: false,\n      list: [],\n      currentSpan: []\n    };\n  },\n  watch: {\n    data: function data() {\n      if (!this.data.length) {\n        return;\n      }\n\n      d3.select('.trace-tree-inner').selectAll('svg').selectAll('svg').remove();\n      this.changeTree();\n      this.tree.init({\n        label: \"\".concat(this.traceId),\n        children: this.segmentId\n      }, this.data);\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('resize', this.resize);\n    this.changeTree();\n    this.tree = new Tree(this.$refs.traceTree, this);\n    this.tree.init({\n      label: \"\".concat(this.traceId),\n      children: this.segmentId\n    }, this.data);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.resize);\n  },\n  methods: {\n    copy: copy,\n    handleSelectSpan: function handleSelectSpan(i) {\n      this.currentSpan = i.data;\n      this.showDetail = true;\n    },\n    traverseTree: function traverseTree(node, spanId, segmentId, data) {\n      if (!node) return;\n\n      if (node.spanId == spanId && node.segmentId == segmentId) {\n        node.children.push(data);\n        return;\n      }\n\n      if (node.children && node.children.length > 0) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.traverseTree(node.children[i], spanId, segmentId, data);\n        }\n      }\n    },\n    computedScale: function computedScale(i) {\n      // Rainbow map\n      var sequentialScale = d3.scaleSequential().domain([0, this.list.length + 1]).interpolator(d3.interpolateCool);\n      return sequentialScale(i);\n    },\n    changeTree: function changeTree() {\n      var _this = this;\n\n      if (this.data.length === 0) return [];\n      this.list = _Array$from(new _Set(this.data.map(function (i) {\n        return i.serviceCode;\n      })));\n      this.segmentId = [];\n      var segmentGroup = {};\n      var segmentIdGroup = [];\n      var fixSpans = [];\n      var segmentHeaders = [];\n      this.data.forEach(function (span) {\n        if (span.parentSpanId === -1) {\n          segmentHeaders.push(span);\n        } else {\n          var index = _this.data.findIndex(function (i) {\n            return i.segmentId === span.segmentId && i.spanId === span.spanId - 1;\n          });\n\n          var fixSpanKeyContent = {\n            traceId: span.traceId,\n            segmentId: span.segmentId,\n            spanId: span.spanId - 1,\n            parentSpanId: span.spanId - 2\n          };\n\n          if (index === -1 && !_.find(fixSpans, fixSpanKeyContent)) {\n            fixSpans.push(_objectSpread({}, fixSpanKeyContent, {\n              refs: [],\n              endpointName: \"VNode: \".concat(span.segmentId),\n              serviceCode: 'VirtualNode',\n              type: \"[Broken] \".concat(span.type),\n              peer: '',\n              component: \"VirtualNode: #\".concat(span.spanId - 1),\n              isError: true,\n              isBroken: true,\n              layer: 'Broken',\n              tags: [],\n              logs: []\n            }));\n          }\n        }\n      });\n      segmentHeaders.forEach(function (span) {\n        if (span.refs.length) {\n          span.refs.forEach(function (ref) {\n            var index = _this.data.findIndex(function (i) {\n              return ref.parentSegmentId === i.segmentId && ref.parentSpanId === i.spanId;\n            });\n\n            if (index === -1) {\n              // create a known broken node.\n              var i = ref.parentSpanId;\n              var fixSpanKeyContent = {\n                traceId: ref.traceId,\n                segmentId: ref.parentSegmentId,\n                spanId: i,\n                parentSpanId: i > -1 ? 0 : -1\n              };\n              !_.find(fixSpans, fixSpanKeyContent) && fixSpans.push(_objectSpread({}, fixSpanKeyContent, {\n                refs: [],\n                endpointName: \"VNode: \".concat(ref.parentSegmentId),\n                serviceCode: 'VirtualNode',\n                type: \"[Broken] \".concat(ref.type),\n                peer: '',\n                component: \"VirtualNode: #\".concat(i),\n                isError: true,\n                isBroken: true,\n                layer: 'Broken',\n                tags: [],\n                logs: []\n              })); // if root broken node is not exist, create a root broken node.\n\n              if (fixSpanKeyContent.parentSpanId > -1) {\n                var fixRootSpanKeyContent = {\n                  traceId: ref.traceId,\n                  segmentId: ref.parentSegmentId,\n                  spanId: 0,\n                  parentSpanId: -1\n                };\n                !_.find(fixSpans, fixRootSpanKeyContent) && fixSpans.push(_objectSpread({}, fixRootSpanKeyContent, {\n                  refs: [],\n                  endpointName: \"VNode: \".concat(ref.parentSegmentId),\n                  serviceCode: 'VirtualNode',\n                  type: \"[Broken] \".concat(ref.type),\n                  peer: '',\n                  component: \"VirtualNode: #0\",\n                  isError: true,\n                  isBroken: true,\n                  layer: 'Broken',\n                  tags: [],\n                  logs: []\n                }));\n              }\n            }\n          });\n        }\n      });\n      [].concat(fixSpans, _toConsumableArray(this.data)).forEach(function (i) {\n        i.label = i.endpointName || 'no operation name';\n        i.children = [];\n\n        if (segmentGroup[i.segmentId] === undefined) {\n          segmentIdGroup.push(i.segmentId);\n          segmentGroup[i.segmentId] = [];\n          segmentGroup[i.segmentId].push(i);\n        } else {\n          segmentGroup[i.segmentId].push(i);\n        }\n      });\n      segmentIdGroup.forEach(function (id) {\n        var currentSegment = segmentGroup[id].sort(function (a, b) {\n          return b.parentSpanId - a.parentSpanId;\n        });\n        currentSegment.forEach(function (s) {\n          var index = currentSegment.findIndex(function (i) {\n            return i.spanId === s.parentSpanId;\n          });\n\n          if (index !== -1) {\n            if (currentSegment[index].isBroken && currentSegment[index].parentSpanId === -1 || !currentSegment[index].isBroken) {\n              currentSegment[index].children.push(s);\n              currentSegment[index].children.sort(function (a, b) {\n                return a.spanId - b.spanId;\n              });\n            }\n          }\n\n          if (s.isBroken) {\n            var _s$children;\n\n            var children = _.filter(_this.data, function (span) {\n              return _.find(span.refs, {\n                traceId: s.traceId,\n                parentSegmentId: s.segmentId,\n                parentSpanId: s.spanId\n              });\n            });\n\n            children.length > 0 && (_s$children = s.children).push.apply(_s$children, _toConsumableArray(children));\n          }\n        });\n        segmentGroup[id] = currentSegment[currentSegment.length - 1];\n      });\n      segmentIdGroup.forEach(function (id) {\n        segmentGroup[id].refs.forEach(function (ref) {\n          if (ref.traceId === _this.traceId) {\n            _this.traverseTree(segmentGroup[ref.parentSegmentId], ref.parentSpanId, ref.parentSegmentId, segmentGroup[id]);\n          }\n\n          ;\n        }); // if(segmentGroup[id].refs.length !==0 ) delete segmentGroup[id];\n      });\n\n      for (var i in segmentGroup) {\n        if (segmentGroup[i].refs.length === 0) this.segmentId.push(segmentGroup[i]);\n      }\n\n      this.segmentId.forEach(function (_, i) {\n        _this.collapse(_this.segmentId[i]);\n      });\n    },\n    collapse: function collapse(d) {\n      var _this2 = this;\n\n      if (d.children) {\n        var dur = d.endTime - d.startTime;\n        d.children.forEach(function (i) {\n          dur -= i.endTime - i.startTime;\n        });\n        d.dur = dur < 0 ? 0 : dur;\n        d.children.forEach(function (i) {\n          return _this2.collapse(i);\n        });\n      }\n    },\n    resize: function resize() {\n      this.tree.resize();\n    },\n    showCurrentSpanDetail: function showCurrentSpanDetail(title, text) {\n      var _this3 = this;\n\n      var textLineNumber = text.split('\\n').length;\n      var textHeight = textLineNumber * 20.2 + 10;\n      var tmpHeight = window.innerHeight * 0.9;\n      textHeight = textHeight >= tmpHeight ? tmpHeight : textHeight;\n      this.$modal.show('dialog', {\n        title: title,\n        text: \"<div style=\\\"height:\".concat(textHeight, \"px\\\">\").concat(text, \"</div>\"),\n        buttons: [{\n          title: 'Copy',\n          handler: function handler() {\n            _this3.copy(text);\n          }\n        }, {\n          title: 'Close'\n        }]\n      });\n    }\n  }\n};",{"version":3,"sources":["trace-detail-chart-tree.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. -->\n<template>\n  <div class=\"trace-tree-charts scroll_hide flex-v\">\n    <transition-group name=\"fade\" tag=\"div\" style=\"padding: 10px 30px;\">\n      <span class=\"time-charts-item mr-10\" v-for=\"(i, index) in list\" :key=\"i\" :style=\"`color:${computedScale(index)}`\">\n        <svg class=\"icon vm mr-5 sm\">\n          <use xlink:href=\"#issue-open-m\"></use>\n        </svg>\n        <span>{{ i }}</span>\n      </span>\n    </transition-group>\n    <div style=\"padding: 0 30px;\">\n      <a class=\"trace-tree-btn mr-10\" @click=\"tree.setDefault()\">Default</a>\n      <a class=\"trace-tree-btn mr-10\" @click=\"tree.getTopSlow()\">Top 5 of slow</a>\n      <a class=\"trace-tree-btn mr-10\" @click=\"tree.getTopChild()\">Top 5 of children</a>\n    </div>\n    <rk-sidebox :width=\"'50%'\" :show.sync=\"showDetail\" :title=\"$t('spanInfo')\">\n      <div class=\"rk-trace-detail\">\n        <h5 class=\"mb-15\">{{ $t('tags') }}.</h5>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('endpoint') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.label }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('spanType') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.type }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('component') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.component }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">Peer:</span><span class=\"g-sm-8 wba\">{{ this.currentSpan.peer || 'No Peer' }}</span>\n        </div>\n        <div class=\"mb-10 clear\">\n          <span class=\"g-sm-4 grey\">{{ $t('error') }}:</span\n          ><span class=\"g-sm-8 wba\">{{ this.currentSpan.isError }}</span>\n        </div>\n        <div class=\"mb-10 clear\" v-for=\"i in this.currentSpan.tags\" :key=\"i.key\">\n          <span class=\"g-sm-4 grey\">{{ i.key }}:</span>\n          <span class=\"g-sm-8 wba\">\n            {{ i.value }}\n            <svg v-if=\"i.key === 'db.statement'\" class=\"icon vm grey link-hover cp ml-5\" @click=\"copy(i.value)\">\n              <use xlink:href=\"#review-list\"></use>\n            </svg>\n          </span>\n        </div>\n        <h5 class=\"mb-10\" v-if=\"this.currentSpan.logs\" v-show=\"this.currentSpan.logs.length\">{{ $t('logs') }}.</h5>\n        <div v-for=\"(i, index) in this.currentSpan.logs\" :key=\"index\">\n          <div class=\"mb-10 sm\">\n            <span class=\"mr-10\">{{ $t('time') }}:</span><span class=\"grey\">{{ i.time | dateformat }}</span>\n          </div>\n          <div class=\"mb-15 clear\" v-for=\"(_i, _index) in i.data\" :key=\"_index\">\n            <div class=\"mb-10\">\n              {{ _i.key }}:<span\n                v-if=\"_i.key === 'stack'\"\n                class=\"r rk-sidebox-magnify\"\n                @click=\"showCurrentSpanDetail(_i.key, _i.value)\"\n              >\n                <svg class=\"icon\">\n                  <use xlink:href=\"#magnify\"></use>\n                </svg>\n              </span>\n            </div>\n            <pre class=\"pl-15 mt-0 mb-0 sm oa\">{{ _i.value }}</pre>\n          </div>\n        </div>\n      </div>\n    </rk-sidebox>\n    <v-dialog width=\"90%\" />\n    <div class=\"trace-tree\" style=\"height:100%\">\n      <div class=\"trace-tree-inner\" ref=\"traceTree\"></div>\n    </div>\n  </div>\n</template>\n<script lang=\"js\">\n  import copy from '@/utils/copy';\n  import * as d3 from 'd3';\n  import Tree from './d3-trace-tree';\n  import _ from 'lodash';\n  /* eslint-disable */\n  /* tslint:disable */\n  export default {\n    props: ['data', 'traceId'],\n    data(){\n      return {\n        segmentId:[],\n        showDetail: false,\n        list: [],\n        currentSpan: [],\n      };\n    },\n    watch: {\n      data() {\n        if(!this.data.length) {return;}\n        d3.select('.trace-tree-inner').selectAll('svg').selectAll('svg').remove();\n        this.changeTree();\n        this.tree.init({label:`${this.traceId}`, children: this.segmentId}, this.data);\n      }\n    },\n    mounted() {\n      window.addEventListener('resize', this.resize);\n      this.changeTree();\n      this.tree = new Tree(this.$refs.traceTree, this);\n      this.tree.init({label:`${this.traceId}`, children: this.segmentId}, this.data);\n    },\n    beforeDestroy() {\n        window.removeEventListener('resize', this.resize);\n    },\n    methods: {\n      copy,\n      handleSelectSpan(i) {\n        this.currentSpan = i.data;\n        this.showDetail = true;\n      },\n      traverseTree(node, spanId, segmentId, data){\n        if (!node) return;\n        if(node.spanId == spanId && node.segmentId == segmentId) {node.children.push(data);return;}\n        if (node.children && node.children.length > 0) {\n          for (let i = 0; i < node.children.length; i++) {\n              this.traverseTree(node.children[i],spanId,segmentId,data);\n          }\n        }\n      },\n      computedScale(i) {\n         // Rainbow map\n        const sequentialScale = d3.scaleSequential()\n        .domain([0, this.list.length + 1])\n        .interpolator(d3.interpolateCool);\n        return sequentialScale(i);\n      },\n      changeTree(){\n        if (this.data.length === 0) return [];\n        this.list = Array.from(new Set(this.data.map(i => i.serviceCode)));\n        this.segmentId = [];\n        const segmentGroup = {}\n        const segmentIdGroup = []\n        const fixSpans = [];\n        const segmentHeaders = [];\n          this.data.forEach((span) => {\n            if (span.parentSpanId === -1) {\n              segmentHeaders.push(span);\n            } else {\n              const index = this.data.findIndex(i => (i.segmentId === span.segmentId && i.spanId === (span.spanId - 1)));\n              const fixSpanKeyContent = {\n                traceId: span.traceId,\n                segmentId: span.segmentId,\n                spanId: span.spanId - 1,\n                parentSpanId: span.spanId - 2,\n              };\n              if (index === -1 && !_.find(fixSpans, fixSpanKeyContent)) {\n                fixSpans.push(\n                  {\n                    ...fixSpanKeyContent, refs: [], endpointName: `VNode: ${span.segmentId}`, serviceCode: 'VirtualNode', type: `[Broken] ${span.type}`, peer: '', component: `VirtualNode: #${span.spanId - 1}`, isError: true, isBroken: true, layer: 'Broken', tags: [], logs: [],\n                  },\n                );\n              }\n            }\n          });\n          segmentHeaders.forEach((span) => {\n            if (span.refs.length) {\n              span.refs.forEach((ref) => {\n                const index = this.data.findIndex(i => (ref.parentSegmentId === i.segmentId && ref.parentSpanId === i.spanId));\n                if (index === -1) {\n                  // create a known broken node.\n                  const i = ref.parentSpanId;\n                  const fixSpanKeyContent = {\n                    traceId: ref.traceId,\n                    segmentId: ref.parentSegmentId,\n                    spanId: i,\n                    parentSpanId: i > -1 ? 0 : -1,\n                  };\n                  !_.find(fixSpans, fixSpanKeyContent) && fixSpans.push(\n                    {\n                      ...fixSpanKeyContent, refs: [], endpointName: `VNode: ${ref.parentSegmentId}`, serviceCode: 'VirtualNode', type: `[Broken] ${ref.type}`, peer: '', component: `VirtualNode: #${i}`, isError: true, isBroken: true, layer: 'Broken', tags: [], logs: [],\n                    },\n                  );\n                  // if root broken node is not exist, create a root broken node.\n                  if (fixSpanKeyContent.parentSpanId > -1) {\n                    const fixRootSpanKeyContent = {\n                      traceId: ref.traceId,\n                      segmentId: ref.parentSegmentId,\n                      spanId: 0,\n                      parentSpanId: -1,\n                    };\n                    !_.find(fixSpans, fixRootSpanKeyContent) && fixSpans.push(\n                      {\n                        ...fixRootSpanKeyContent,\n                        refs: [],\n                        endpointName: `VNode: ${ref.parentSegmentId}`,\n                        serviceCode: 'VirtualNode',\n                        type: `[Broken] ${ref.type}`,\n                        peer: '',\n                        component: `VirtualNode: #0`,\n                        isError: true,\n                        isBroken: true,\n                        layer: 'Broken',\n                        tags: [],\n                        logs: [],\n                      },\n                    );\n                  }\n                }\n              });\n            }\n          });\n          [...fixSpans, ...this.data].forEach(i => {\n            i.label=i.endpointName || 'no operation name';\n            i.children = [];\n            if(segmentGroup[i.segmentId] === undefined){\n              segmentIdGroup.push(i.segmentId);\n              segmentGroup[i.segmentId] = [];\n              segmentGroup[i.segmentId].push(i);\n            }else{\n              segmentGroup[i.segmentId].push(i);\n            }\n          });\n          segmentIdGroup.forEach(id => {\n            let currentSegment = segmentGroup[id].sort((a,b) => b.parentSpanId-a.parentSpanId);\n            currentSegment.forEach(s =>{\n              let index = currentSegment.findIndex(i => i.spanId === s.parentSpanId);\n              if (index !== -1) {\n                if ((currentSegment[index].isBroken && currentSegment[index].parentSpanId === -1) || !currentSegment[index].isBroken) {\n                  currentSegment[index].children.push(s);\n                  currentSegment[index].children.sort((a, b) => a.spanId - b.spanId);\n                }\n              }\n              if (s.isBroken) {\n                const children = _.filter(this.data, (span) => {\n                  return _.find(span.refs, {traceId: s.traceId, parentSegmentId: s.segmentId, parentSpanId: s.spanId});\n                });\n                children.length > 0 && s.children.push(...children);\n              }\n            })\n            segmentGroup[id] = currentSegment[currentSegment.length-1]\n          })\n          segmentIdGroup.forEach(id => {\n            segmentGroup[id].refs.forEach(ref => {\n              if(ref.traceId === this.traceId) {\n                this.traverseTree(segmentGroup[ref.parentSegmentId],ref.parentSpanId,ref.parentSegmentId,segmentGroup[id])\n              };\n            })\n            // if(segmentGroup[id].refs.length !==0 ) delete segmentGroup[id];\n          })\n        for (let i in segmentGroup) {\n          if(segmentGroup[i].refs.length ===0 )\n          this.segmentId.push(segmentGroup[i]);\n        }\n        this.segmentId.forEach((_, i) => {\n          this.collapse(this.segmentId[i]);\n        })\n      },\n      collapse(d) {\n        if(d.children){\n          let dur = d.endTime - d.startTime;\n          d.children.forEach(i => {\n            dur -= (i.endTime - i.startTime);\n          })\n          d.dur = dur < 0 ? 0 : dur;\n          d.children.forEach((i) => this.collapse(i));\n        }\n      },\n      resize() {\n          this.tree.resize();\n      },\n      showCurrentSpanDetail(title, text) {\n        const textLineNumber = text.split('\\n').length;\n        let textHeight = textLineNumber * 20.2 + 10;\n        const tmpHeight = window.innerHeight * 0.9\n        textHeight = textHeight >= tmpHeight ? tmpHeight : textHeight;\n        this.$modal.show('dialog', {\n          title,\n          text: `<div style=\"height:${textHeight}px\">${text}</div>`,\n          buttons: [\n            {\n              title: 'Copy',\n              handler: () => {\n                this.copy(text);\n              },\n            },\n            {\n              title: 'Close',\n            },\n          ],\n        })\n      },\n    }\n  };\n</script>\n<style lang=\"scss\">\n  .trace-tree-btn {\n    display: inline-block;\n    border-radius: 4px;\n    padding: 0px 7px;\n    background-color: #40454e;\n    color: #eee;\n    font-size: 11px;\n  }\n  .trace-tree-charts {\n    overflow: auto;\n    flex-grow: 1;\n    height: 100%;\n  }\n  .trace-node .group {\n    cursor: pointer;\n    fill-opacity: 0;\n  }\n  .trace-tree-inner {\n    height: 100%;\n  }\n  .trace-node-container {\n    fill: rgba(0, 0, 0, 0);\n    stroke-width: 5px;\n    cursor: pointer;\n    &:hover {\n      fill: rgba(0, 0, 0, 0.05);\n    }\n  }\n  .trace-node .node-text {\n    font: 12.5px sans-serif;\n    pointer-events: none;\n  }\n  .domain {\n    display: none;\n  }\n  .tree-link {\n    fill: none;\n    stroke: rgba(0, 0, 0, 0.1);\n    stroke-width: 2px;\n  }\n  .time-charts-item {\n    display: inline-block;\n    padding: 2px 8px;\n    border: 1px solid;\n    font-size: 11px;\n    border-radius: 4px;\n  }\n  .trace-tree {\n    fill: rgba(0, 0, 0, 0);\n    flex-grow: 1;\n  }\n  .trace-tree .trace-node rect {\n    &:hover {\n      fill: rgba(0, 0, 0, 0.05);\n    }\n  }\n  .dialog-c-text {\n    white-space: pre;\n    overflow: auto;\n    font-family: monospace;\n  }\n</style>\n"],"sourceRoot":"src/views/components/trace"}]}