{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-option.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-option.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _objectSpread from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\nvar _mutations;\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as types from './mutation-types';\nimport graph from '@/graph';\nvar initState = {\n  services: [],\n  currentService: {},\n  endpoints: [],\n  currentEndpoint: {},\n  instances: [],\n  currentInstance: {},\n  databases: [],\n  currentDatabase: {},\n  keywordService: localStorage.getItem('keywordServiceName') || '',\n  updateDashboard: ''\n}; // getters\n\nvar getters = {}; // mutations\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_SERVICES, function (state, data) {\n  if (!data.length) {\n    return;\n  }\n\n  state.services = data;\n\n  if (!state.currentService.key && data.length) {\n    state.currentService = data[0];\n  }\n}), _defineProperty(_mutations, types.SET_CURRENT_SERVICE, function (state, service) {\n  state.currentService = service;\n  state.updateDashboard = service;\n}), _defineProperty(_mutations, types.SET_ENDPOINTS, function (state, data) {\n  state.endpoints = data;\n\n  if (!data.length) {\n    state.currentEndpoint = {};\n    return;\n  }\n\n  if (!state.currentEndpoint.key && data.length || !state.endpoints.includes(state.currentEndpoint)) {\n    state.currentEndpoint = data[0];\n  }\n}), _defineProperty(_mutations, types.SET_CURRENT_ENDPOINT, function (state, endpoint) {\n  state.currentEndpoint = endpoint;\n  state.updateDashboard = endpoint;\n}), _defineProperty(_mutations, types.SET_INSTANCES, function (state, data) {\n  state.instances = data;\n\n  if (!data.length) {\n    state.currentInstance = {};\n    return;\n  }\n\n  if (!state.currentInstance.key && data.length || !state.instances.includes(state.currentInstance)) {\n    state.currentInstance = data[0];\n  }\n}), _defineProperty(_mutations, types.SET_CURRENT_INSTANCE, function (state, instance) {\n  state.currentInstance = instance;\n  state.updateDashboard = instance;\n}), _defineProperty(_mutations, types.SET_DATABASES, function (state, data) {\n  state.databases = data;\n\n  if (!data.length) {\n    return;\n  }\n\n  if (!state.currentDatabase.key && data.length) {\n    state.currentDatabase = data[0];\n  }\n}), _defineProperty(_mutations, types.SET_CURRENT_DATABASE, function (state, service) {\n  state.currentDatabase = service;\n}), _defineProperty(_mutations, types.SET_KEYWORDSERVICE, function (state, data) {\n  state.keywordService = data;\n  window.localStorage.setItem('keywordServiceName', data);\n}), _mutations); // actions\n\nvar actions = {\n  GET_SERVICES: function GET_SERVICES(context, params) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n\n    return graph.query('queryServices').params(params).then(function (res) {\n      context.commit(types.SET_SERVICES, res.data.data.services);\n    });\n  },\n  GET_SERVICE_ENDPOINTS: function GET_SERVICE_ENDPOINTS(context, params) {\n    if (!context.state.currentService.key) {\n      return new _Promise(function (resolve) {\n        return resolve();\n      });\n    }\n\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n\n    return graph.query('queryEndpoints').params(_objectSpread({\n      serviceId: context.state.currentService.key\n    }, params)).then(function (res) {\n      context.commit(types.SET_ENDPOINTS, res.data.data.getEndpoints);\n    });\n  },\n  GET_ENDPOINTS: function GET_ENDPOINTS(context, params) {\n    return graph.query('queryEndpoints').params(params).then(function (res) {\n      context.commit(types.SET_ENDPOINTS, res.data.data.endpoints);\n    });\n  },\n  GET_SERVICE_INSTANCES: function GET_SERVICE_INSTANCES(context, params) {\n    if (!context.state.currentService.key) {\n      return new _Promise(function (resolve) {\n        return resolve();\n      });\n    }\n\n    return graph.query('queryInstances').params(_objectSpread({\n      serviceId: context.state.currentService.key\n    }, params)).then(function (res) {\n      context.commit(types.SET_INSTANCES, res.data.data.getServiceInstances);\n    });\n  },\n  GET_INSTANCES: function GET_INSTANCES(context, params) {\n    return graph.query('queryInstances').params(params).then(function (res) {\n      context.commit(types.SET_INSTANCES, res.data.data);\n    });\n  },\n  GET_DATABASES: function GET_DATABASES(context, params) {\n    return graph.query('queryDatabases').params(params).then(function (res) {\n      context.commit(types.SET_DATABASES, res.data.data.services);\n    });\n  },\n  SELECT_SERVICE: function SELECT_SERVICE(context, params) {\n    if (!params.service.key) {\n      return;\n    }\n\n    context.commit('SET_CURRENT_SERVICE', params.service);\n    context.dispatch('GET_SERVICE_ENDPOINTS', {});\n    context.dispatch('GET_SERVICE_INSTANCES', {\n      duration: params.duration\n    });\n  },\n  SELECT_ENDPOINT: function SELECT_ENDPOINT(context, params) {\n    context.commit('SET_CURRENT_ENDPOINT', params.endpoint);\n  },\n  SELECT_INSTANCE: function SELECT_INSTANCE(context, params) {\n    context.commit('SET_CURRENT_INSTANCE', params.instance);\n  },\n  SELECT_DATABASE: function SELECT_DATABASE(context, params) {\n    context.commit('SET_CURRENT_DATABASE', params);\n    context.dispatch('RUN_EVENTS', {}, {\n      root: true\n    });\n  },\n  SET_CURRENT_STATE: function SET_CURRENT_STATE(context) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    context.commit(types.SET_CURRENT_SERVICE, params.service ? params.service : {});\n    context.commit(types.SET_CURRENT_DATABASE, params.database ? params.database : {});\n    context.commit(types.SET_CURRENT_ENDPOINT, params.endpoint ? params.endpoint : {});\n    context.commit(types.SET_CURRENT_INSTANCE, params.instance ? params.instance : {});\n  },\n  MIXHANDLE_GET_OPTION: function MIXHANDLE_GET_OPTION(context, params) {\n    switch (params.compType) {\n      case 'service':\n        return context.dispatch('GET_SERVICES', {\n          duration: params.duration,\n          keyword: params.keywordServiceName\n        }).then(function () {\n          return context.dispatch('GET_SERVICE_ENDPOINTS', {});\n        }).then(function () {\n          return context.dispatch('GET_SERVICE_INSTANCES', {\n            duration: params.duration\n          });\n        });\n\n      case 'database':\n        return context.dispatch('GET_DATABASES', {\n          duration: params.duration\n        });\n\n      default:\n        break;\n    }\n  },\n  GET_ITEM_ENDPOINTS: function GET_ITEM_ENDPOINTS(context, params) {\n    return graph.query('queryEndpoints').params(params).then(function (res) {\n      return res.data.data.getEndpoints;\n    });\n  },\n  GET_ITEM_INSTANCES: function GET_ITEM_INSTANCES(context, params) {\n    return graph.query('queryInstances').params(params).then(function (res) {\n      return res.data.data.getServiceInstances;\n    });\n  },\n  GET_ITEM_SERVICES: function GET_ITEM_SERVICES(context, params) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n\n    return graph.query('queryServices').params(params).then(function (res) {\n      return res.data.data.services || [];\n    });\n  }\n};\nexport default {\n  state: initState,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-option.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Commit, ActionTree, MutationTree, Dispatch } from 'vuex';\nimport * as types from './mutation-types';\nimport { AxiosResponse } from 'axios';\nimport graph from '@/graph';\n\nexport interface State {\n  services: any[];\n  currentService: any;\n  databases: any;\n  currentDatabase: any;\n  endpoints: any[];\n  currentEndpoint: any;\n  instances: any[];\n  currentInstance: any;\n  keywordService: string;\n  updateDashboard: string;\n}\n\nconst initState: State = {\n  services: [],\n  currentService: {},\n  endpoints: [],\n  currentEndpoint: {},\n  instances: [],\n  currentInstance: {},\n  databases: [],\n  currentDatabase: {},\n  keywordService: localStorage.getItem('keywordServiceName') || '',\n  updateDashboard: '',\n};\n\n// getters\nconst getters = {};\n\n// mutations\nconst mutations: MutationTree<State> = {\n  [types.SET_SERVICES](state: State, data: any) {\n    if (!data.length) {\n      return;\n    }\n    state.services = data;\n    if (!state.currentService.key && data.length) {\n      state.currentService = data[0];\n    }\n  },\n  [types.SET_CURRENT_SERVICE](state: State, service: any) {\n    state.currentService = service;\n    state.updateDashboard = service;\n  },\n  [types.SET_ENDPOINTS](state: State, data: any) {\n    state.endpoints = data;\n    if (!data.length) {\n      state.currentEndpoint = {};\n      return;\n    }\n    if ((!state.currentEndpoint.key && data.length) || !state.endpoints.includes(state.currentEndpoint)) {\n      state.currentEndpoint = data[0];\n    }\n  },\n  [types.SET_CURRENT_ENDPOINT](state: State, endpoint: any) {\n    state.currentEndpoint = endpoint;\n    state.updateDashboard = endpoint;\n  },\n  [types.SET_INSTANCES](state: State, data: any) {\n    state.instances = data;\n    if (!data.length) {\n      state.currentInstance = {};\n      return;\n    }\n    if ((!state.currentInstance.key && data.length) || !state.instances.includes(state.currentInstance)) {\n      state.currentInstance = data[0];\n    }\n  },\n  [types.SET_CURRENT_INSTANCE](state: State, instance: any) {\n    state.currentInstance = instance;\n    state.updateDashboard = instance;\n  },\n  [types.SET_DATABASES](state: State, data: any) {\n    state.databases = data;\n    if (!data.length) {\n      return;\n    }\n    if (!state.currentDatabase.key && data.length) {\n      state.currentDatabase = data[0];\n    }\n  },\n  [types.SET_CURRENT_DATABASE](state: State, service: any) {\n    state.currentDatabase = service;\n  },\n  [types.SET_KEYWORDSERVICE](state: State, data: string) {\n    state.keywordService = data;\n    window.localStorage.setItem('keywordServiceName', data);\n  },\n};\n\n// actions\nconst actions: ActionTree<State, any> = {\n  GET_SERVICES(context: { commit: Commit }, params: { duration: any; keyword: string }) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n    return graph\n      .query('queryServices')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_SERVICES, res.data.data.services);\n      });\n  },\n  GET_SERVICE_ENDPOINTS(context: { commit: Commit; state: any }, params: { keyword: string }) {\n    if (!context.state.currentService.key) {\n      return new Promise((resolve) => resolve());\n    }\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n    return graph\n      .query('queryEndpoints')\n      .params({ serviceId: context.state.currentService.key, ...params })\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_ENDPOINTS, res.data.data.getEndpoints);\n      });\n  },\n  GET_ENDPOINTS(context: { commit: Commit }, params: any) {\n    return graph\n      .query('queryEndpoints')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_ENDPOINTS, res.data.data.endpoints);\n      });\n  },\n  GET_SERVICE_INSTANCES(context: { commit: Commit; state: any }, params: any) {\n    if (!context.state.currentService.key) {\n      return new Promise((resolve) => resolve());\n    }\n    return graph\n      .query('queryInstances')\n      .params({ serviceId: context.state.currentService.key, ...params })\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_INSTANCES, res.data.data.getServiceInstances);\n      });\n  },\n  GET_INSTANCES(context: { commit: Commit }, params: any) {\n    return graph\n      .query('queryInstances')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_INSTANCES, res.data.data);\n      });\n  },\n  GET_DATABASES(context: { commit: Commit; rootState: any }, params: any) {\n    return graph\n      .query('queryDatabases')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        context.commit(types.SET_DATABASES, res.data.data.services);\n      });\n  },\n  SELECT_SERVICE(context: { commit: Commit; dispatch: Dispatch }, params: any) {\n    if (!params.service.key) {\n      return;\n    }\n    context.commit('SET_CURRENT_SERVICE', params.service);\n    context.dispatch('GET_SERVICE_ENDPOINTS', {});\n    context.dispatch('GET_SERVICE_INSTANCES', { duration: params.duration });\n  },\n  SELECT_ENDPOINT(context: { commit: Commit; dispatch: Dispatch; state: any; rootState: any }, params: any) {\n    context.commit('SET_CURRENT_ENDPOINT', params.endpoint);\n  },\n  SELECT_INSTANCE(context: { commit: Commit; dispatch: Dispatch; state: any; rootState: any }, params: any) {\n    context.commit('SET_CURRENT_INSTANCE', params.instance);\n  },\n  SELECT_DATABASE(context: { commit: Commit; dispatch: Dispatch }, params: any) {\n    context.commit('SET_CURRENT_DATABASE', params);\n    context.dispatch('RUN_EVENTS', {}, { root: true });\n  },\n  SET_CURRENT_STATE(context: { commit: Commit }, params: any = {}) {\n    context.commit(types.SET_CURRENT_SERVICE, params.service ? params.service : {});\n    context.commit(types.SET_CURRENT_DATABASE, params.database ? params.database : {});\n    context.commit(types.SET_CURRENT_ENDPOINT, params.endpoint ? params.endpoint : {});\n    context.commit(types.SET_CURRENT_INSTANCE, params.instance ? params.instance : {});\n  },\n  MIXHANDLE_GET_OPTION(context: { commit: Commit; dispatch: Dispatch; state: State; getters: any }, params: any) {\n    switch (params.compType) {\n      case 'service':\n        return context\n          .dispatch('GET_SERVICES', { duration: params.duration, keyword: params.keywordServiceName })\n          .then(() => context.dispatch('GET_SERVICE_ENDPOINTS', {}))\n          .then(() => context.dispatch('GET_SERVICE_INSTANCES', { duration: params.duration }));\n      case 'database':\n        return context.dispatch('GET_DATABASES', { duration: params.duration });\n      default:\n        break;\n    }\n  },\n  GET_ITEM_ENDPOINTS(context, params) {\n    return graph\n      .query('queryEndpoints')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        return res.data.data.getEndpoints;\n      });\n  },\n  GET_ITEM_INSTANCES(context, params) {\n    return graph\n      .query('queryInstances')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        return res.data.data.getServiceInstances;\n      });\n  },\n  GET_ITEM_SERVICES(context, params: { duration: any; keyword: string }) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n    return graph\n      .query('queryServices')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        return res.data.data.services || [];\n      });\n  },\n};\n\nexport default {\n  state: initState,\n  getters,\n  actions,\n  mutations,\n};\n"],"sourceRoot":""}]}