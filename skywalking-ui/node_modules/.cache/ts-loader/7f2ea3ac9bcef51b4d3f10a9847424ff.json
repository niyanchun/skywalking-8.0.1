{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/profile/profile-store.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/profile/profile-store.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport _objectSpread from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nvar _mutations;\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport graph from '@/graph';\nimport * as types from '../../mutation-types';\nimport { InitTaskField, InitTaskFieldSource, ChangeTaskOpt } from './profile-constant';\nvar initState = {\n  headerSource: {\n    serviceSource: [{\n      key: '',\n      label: 'None'\n    }],\n    currentService: {\n      key: '',\n      label: 'None'\n    },\n    endpointName: ''\n  },\n  newTaskFields: InitTaskField,\n  taskFieldSource: InitTaskFieldSource,\n  taskListSource: [],\n  segmentSpans: [],\n  currentSegment: {\n    operationNames: [],\n    duration: 0,\n    isError: false,\n    key: '',\n    start: '',\n    traceIds: []\n  },\n  segmentList: [],\n  profileAnalyzation: [],\n  highlightTop: true,\n  currentSpan: {}\n}; // getters\n\nvar getters = {\n  updateTaskOpt: function updateTaskOpt() {\n    return ChangeTaskOpt;\n  }\n}; // mutations\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_SERVICES, function (state, data) {\n  state.headerSource.serviceSource = [{\n    key: 'all',\n    label: 'All'\n  }].concat(_toConsumableArray(data));\n  state.headerSource.currentService = state.headerSource.serviceSource[0];\n  state.taskFieldSource.serviceSource = data;\n  state.newTaskFields.service = data[0] || {};\n}), _defineProperty(_mutations, types.SET_TASK_OPTIONS, function (state, data) {\n  var param = ['minThreshold', 'endpointName'];\n  state.newTaskFields = _objectSpread({}, state.newTaskFields, _defineProperty({}, data.type, param.includes(data.type) ? data.item.key : data.item));\n}), _defineProperty(_mutations, types.SET_TASK_LIST, function (state, data) {\n  state.taskListSource = data;\n}), _defineProperty(_mutations, types.SET_SEGMENT_SPANS, function (state, data) {\n  state.segmentSpans = data;\n}), _defineProperty(_mutations, types.SET_CURRENT_SPAN, function (state, data) {\n  state.currentSpan = data;\n}), _defineProperty(_mutations, types.SET_SEGMENT_LIST, function (state, data) {\n  state.segmentList = data;\n}), _defineProperty(_mutations, types.SET_CURRENT_SEGMENT, function (state, data) {\n  state.currentSegment = data;\n}), _defineProperty(_mutations, types.SET_PROFILE_ANALYZATION, function (state, data) {\n  state.profileAnalyzation = data;\n}), _defineProperty(_mutations, types.SET_HEADER_SOURCE, function (state, data) {\n  state.headerSource = _objectSpread({}, state.headerSource, data);\n}), _defineProperty(_mutations, types.SET_HIGHLIGHT_TOP, function (state) {\n  state.highlightTop = !state.highlightTop;\n}), _mutations); // actions\n\nvar actions = {\n  GET_SERVICES: function GET_SERVICES(context, params) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n\n    graph.query('queryServices').params(params).then(function (res) {\n      if (!res.data.data) {\n        return;\n      }\n\n      context.commit(types.SET_SERVICES, res.data.data.services);\n      context.dispatch('GET_TASK_LIST');\n    });\n  },\n  GET_TASK_LIST: function GET_TASK_LIST(context) {\n    var headerSource = context.state.headerSource;\n    var param = {\n      serviceId: headerSource.currentService.key === 'all' ? '' : headerSource.currentService.key,\n      endpointName: headerSource.endpointName\n    };\n    graph.query('getProfileTaskList').params(param).then(function (res) {\n      if (!res.data.data) {\n        return;\n      }\n\n      context.commit(types.SET_TASK_LIST, res.data.data.getProfileTaskList);\n      return res.data.data.getProfileTaskList;\n    }).then(function (data) {\n      if (!data) {\n        return;\n      }\n\n      context.dispatch('GET_SEGMENT_LIST', {\n        taskID: data[0].id\n      });\n    });\n  },\n  GET_SEGMENT_LIST: function GET_SEGMENT_LIST(context, params) {\n    graph.query('getProfileTaskSegmentList').params(params).then(function (res) {\n      if (!res.data.data.getProfileTaskSegmentList) {\n        return;\n      }\n\n      var getProfileTaskSegmentList = res.data.data.getProfileTaskSegmentList;\n      context.commit(types.SET_SEGMENT_LIST, getProfileTaskSegmentList);\n\n      if (getProfileTaskSegmentList[0]) {\n        context.commit(types.SET_CURRENT_SEGMENT, getProfileTaskSegmentList[0]);\n        context.dispatch('GET_SEGMENT_SPANS', {\n          segmentId: getProfileTaskSegmentList[0].segmentId\n        });\n      } else {\n        context.commit(types.SET_CURRENT_SEGMENT, {\n          traceIds: []\n        });\n        context.commit(types.SET_SEGMENT_SPANS, []);\n        context.commit(types.SET_PROFILE_ANALYZATION, []);\n      }\n    });\n  },\n  GET_SEGMENT_SPANS: function GET_SEGMENT_SPANS(context, params) {\n    graph.query('queryProfileSegment').params(params).then(function (res) {\n      var getProfiledSegment = res.data.data.getProfiledSegment;\n\n      if (!getProfiledSegment) {\n        return;\n      }\n\n      context.commit(types.SET_SEGMENT_SPANS, getProfiledSegment.spans);\n\n      if (!(getProfiledSegment.spans && getProfiledSegment.spans.length)) {\n        return;\n      }\n\n      var index = getProfiledSegment.spans.length - 1 || 0;\n      context.commit(types.SET_CURRENT_SPAN, getProfiledSegment.spans[index]);\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  GET_PROFILE_ANALYZE: function GET_PROFILE_ANALYZE(context, params) {\n    return graph.query('getProfileAnalyze').params(params).then(function (res) {\n      var _res$data$data = res.data.data,\n          getProfileAnalyze = _res$data$data.getProfileAnalyze,\n          tip = _res$data$data.tip;\n\n      if (tip) {\n        return tip;\n      }\n\n      if (!getProfileAnalyze) {\n        context.commit(types.SET_PROFILE_ANALYZATION, []);\n        return;\n      }\n\n      context.commit(types.SET_PROFILE_ANALYZATION, getProfileAnalyze.trees);\n    });\n  },\n  CREATE_PROFILE_TASK: function CREATE_PROFILE_TASK(context, param) {\n    var _context$state$newTas = context.state.newTaskFields,\n        service = _context$state$newTas.service,\n        endpointName = _context$state$newTas.endpointName,\n        minThreshold = _context$state$newTas.minThreshold,\n        monitorDuration = _context$state$newTas.monitorDuration,\n        dumpPeriod = _context$state$newTas.dumpPeriod,\n        maxSamplingCount = _context$state$newTas.maxSamplingCount,\n        monitorTime = _context$state$newTas.monitorTime;\n    var creationRequest = {\n      serviceId: service.key,\n      endpointName: endpointName,\n      startTime: monitorTime.key === '1' ? param.startTime : new Date().getTime(),\n      duration: monitorDuration.key,\n      minDurationThreshold: Number(minThreshold),\n      dumpPeriod: dumpPeriod.key,\n      maxSamplingCount: maxSamplingCount.key\n    };\n    return graph.query('saveProfileTask').params({\n      creationRequest: creationRequest\n    }).then(function (res) {\n      if (res.data.data && res.data.data.createTask && res.data.data.createTask.errorReason) {\n        return res.data.data.createTask;\n      }\n\n      context.dispatch('GET_TASK_LIST');\n      return res.data.data.createTask;\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: initState,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/profile/profile-store.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Commit, Dispatch } from 'vuex';\nimport { AxiosResponse } from 'axios';\n\nimport graph from '@/graph';\nimport * as types from '../../mutation-types';\nimport {\n  IOption,\n  ITaskOptions,\n  TaskSourceType,\n  TaskListSourceType,\n  TracesSourceType,\n  IHeaderSource,\n} from '@/types/profile';\nimport { InitTaskField, InitTaskFieldSource, ChangeTaskOpt } from './profile-constant';\n\nexport interface State {\n  headerSource: IHeaderSource;\n  newTaskFields: ITaskOptions;\n  taskFieldSource: TaskSourceType;\n  taskListSource: TaskListSourceType[];\n  segmentSpans: any[];\n  currentSegment: any;\n  segmentList: TracesSourceType[];\n  profileAnalyzation: any;\n  highlightTop: boolean;\n  currentSpan: any;\n}\nconst initState: State = {\n  headerSource: {\n    serviceSource: [{ key: '', label: 'None' }],\n    currentService: { key: '', label: 'None' },\n    endpointName: '',\n  },\n  newTaskFields: InitTaskField,\n  taskFieldSource: InitTaskFieldSource,\n  taskListSource: [],\n  segmentSpans: [],\n  currentSegment: {\n    operationNames: [],\n    duration: 0,\n    isError: false,\n    key: '',\n    start: '',\n    traceIds: [],\n  },\n  segmentList: [],\n  profileAnalyzation: [],\n  highlightTop: true,\n  currentSpan: {},\n};\n// getters\nconst getters = {\n  updateTaskOpt() {\n    return ChangeTaskOpt;\n  },\n};\n\n// mutations\nconst mutations = {\n  [types.SET_SERVICES](state: State, data: any[]) {\n    state.headerSource.serviceSource = [{ key: 'all', label: 'All' }, ...data];\n    state.headerSource.currentService = state.headerSource.serviceSource[0];\n    state.taskFieldSource.serviceSource = data;\n    state.newTaskFields.service = data[0] || {};\n  },\n  [types.SET_TASK_OPTIONS](state: State, data: { type: string; item: IOption }) {\n    const param = ['minThreshold', 'endpointName'];\n    state.newTaskFields = {\n      ...state.newTaskFields,\n      [data.type]: param.includes(data.type) ? data.item.key : data.item,\n    };\n  },\n  [types.SET_TASK_LIST](state: State, data: TaskListSourceType[]) {\n    state.taskListSource = data;\n  },\n  [types.SET_SEGMENT_SPANS](state: State, data: any[]) {\n    state.segmentSpans = data;\n  },\n  [types.SET_CURRENT_SPAN](state: State, data: any) {\n    state.currentSpan = data;\n  },\n  [types.SET_SEGMENT_LIST](state: State, data: TracesSourceType[]) {\n    state.segmentList = data;\n  },\n  [types.SET_CURRENT_SEGMENT](state: State, data: any) {\n    state.currentSegment = data;\n  },\n  [types.SET_PROFILE_ANALYZATION](state: State, data: any[]) {\n    state.profileAnalyzation = data;\n  },\n  [types.SET_HEADER_SOURCE](state: State, data: IHeaderSource) {\n    state.headerSource = {\n      ...state.headerSource,\n      ...data,\n    };\n  },\n  [types.SET_HIGHLIGHT_TOP](state: State) {\n    state.highlightTop = !state.highlightTop;\n  },\n};\n\n// actions\nconst actions = {\n  GET_SERVICES(context: { commit: Commit; dispatch: Dispatch }, params: { duration: any; keyword: string }) {\n    if (!params.keyword) {\n      params.keyword = '';\n    }\n    graph\n      .query('queryServices')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        if (!res.data.data) {\n          return;\n        }\n        context.commit(types.SET_SERVICES, res.data.data.services);\n        context.dispatch('GET_TASK_LIST');\n      });\n  },\n  GET_TASK_LIST(context: { state: State; dispatch: Dispatch; commit: Commit }) {\n    const { headerSource } = context.state;\n    const param = {\n      serviceId: headerSource.currentService.key === 'all' ? '' : headerSource.currentService.key,\n      endpointName: headerSource.endpointName,\n    };\n\n    graph\n      .query('getProfileTaskList')\n      .params(param)\n      .then((res: AxiosResponse) => {\n        if (!res.data.data) {\n          return;\n        }\n        context.commit(types.SET_TASK_LIST, res.data.data.getProfileTaskList);\n        return res.data.data.getProfileTaskList;\n      })\n      .then((data: any) => {\n        if (!data) {\n          return;\n        }\n        context.dispatch('GET_SEGMENT_LIST', { taskID: data[0].id });\n      });\n  },\n  GET_SEGMENT_LIST(context: { commit: Commit; dispatch: Dispatch }, params: { taskID: string }) {\n    graph\n      .query('getProfileTaskSegmentList')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        if (!res.data.data.getProfileTaskSegmentList) {\n          return;\n        }\n        const { getProfileTaskSegmentList } = res.data.data;\n\n        context.commit(types.SET_SEGMENT_LIST, getProfileTaskSegmentList);\n        if (getProfileTaskSegmentList[0]) {\n          context.commit(types.SET_CURRENT_SEGMENT, getProfileTaskSegmentList[0]);\n          context.dispatch('GET_SEGMENT_SPANS', { segmentId: getProfileTaskSegmentList[0].segmentId });\n        } else {\n          context.commit(types.SET_CURRENT_SEGMENT, {\n            traceIds: [],\n          });\n          context.commit(types.SET_SEGMENT_SPANS, []);\n          context.commit(types.SET_PROFILE_ANALYZATION, []);\n        }\n      });\n  },\n  GET_SEGMENT_SPANS(context: { state: State; commit: Commit; dispatch: Dispatch }, params: { segmentId: string }) {\n    graph\n      .query('queryProfileSegment')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        const { getProfiledSegment } = res.data.data;\n        if (!getProfiledSegment) {\n          return;\n        }\n        context.commit(types.SET_SEGMENT_SPANS, getProfiledSegment.spans);\n        if (!(getProfiledSegment.spans && getProfiledSegment.spans.length)) {\n          return;\n        }\n        const index = getProfiledSegment.spans.length - 1 || 0;\n        context.commit(types.SET_CURRENT_SPAN, getProfiledSegment.spans[index]);\n      })\n      .catch((error: any) => {\n        throw error;\n      });\n  },\n  GET_PROFILE_ANALYZE(\n    context: { commit: Commit; state: State; dispatch: Dispatch },\n    params: { segmentId: string; timeRanges: Array<{ start: number; end: number }> },\n  ) {\n    return graph\n      .query('getProfileAnalyze')\n      .params(params)\n      .then((res: AxiosResponse) => {\n        const { getProfileAnalyze, tip } = res.data.data;\n        if (tip) {\n          return tip;\n        }\n        if (!getProfileAnalyze) {\n          context.commit(types.SET_PROFILE_ANALYZATION, []);\n          return;\n        }\n        context.commit(types.SET_PROFILE_ANALYZATION, getProfileAnalyze.trees);\n      });\n  },\n  CREATE_PROFILE_TASK(context: { commit: Commit; state: State; dispatch: Dispatch }, param: { startTime: number }) {\n    const {\n      service,\n      endpointName,\n      minThreshold,\n      monitorDuration,\n      dumpPeriod,\n      maxSamplingCount,\n      monitorTime,\n    } = context.state.newTaskFields;\n    const creationRequest = {\n      serviceId: service.key,\n      endpointName,\n      startTime: monitorTime.key === '1' ? param.startTime : new Date().getTime(),\n      duration: monitorDuration.key,\n      minDurationThreshold: Number(minThreshold),\n      dumpPeriod: dumpPeriod.key,\n      maxSamplingCount: maxSamplingCount.key,\n    };\n\n    return graph\n      .query('saveProfileTask')\n      .params({ creationRequest })\n      .then((res: AxiosResponse) => {\n        if (res.data.data && res.data.data.createTask && res.data.data.createTask.errorReason) {\n          return res.data.data.createTask;\n        }\n        context.dispatch('GET_TASK_LIST');\n        return res.data.data.createTask;\n      });\n  },\n};\n\nexport default {\n  namespaced: true,\n  state: initState,\n  getters,\n  actions,\n  mutations,\n};\n"],"sourceRoot":""}]}