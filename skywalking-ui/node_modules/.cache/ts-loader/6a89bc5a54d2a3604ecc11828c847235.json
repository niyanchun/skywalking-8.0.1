{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-data-query.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-data-query.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport axios from 'axios';\nimport { cancelToken } from '@/utils/cancelToken';\nimport fragmentAll from './constant-metrics-query';\nexport var TopologyType;\n\n(function (TopologyType) {\n  TopologyType[\"TOPOLOGY_ENDPOINT\"] = \"TOPOLOGY_ENDPOINT\";\n  TopologyType[\"TOPOLOGY_INSTANCE\"] = \"TOPOLOGY_INSTANCE\";\n})(TopologyType || (TopologyType = {})); // actions\n\n\nvar actions = {\n  GET_QUERY: function GET_QUERY(context, params) {\n    var _context$rootState$ro = context.rootState.rocketOption,\n        currentDatabase = _context$rootState$ro.currentDatabase,\n        currentEndpoint = _context$rootState$ro.currentEndpoint,\n        currentInstance = _context$rootState$ro.currentInstance,\n        currentService = _context$rootState$ro.currentService;\n    var dashboard = \"\".concat(window.localStorage.getItem('dashboard'));\n    var tree = dashboard ? JSON.parse(dashboard) : context.state.tree;\n    var normal = params.type ? true : tree[context.state.group].type === 'database' ? false : true;\n    var config = {};\n    var names = ['readSampledRecords', 'sortMetrics'];\n\n    if (params.type === TopologyType.TOPOLOGY_ENDPOINT) {\n      var endpointComps = \"\".concat(window.localStorage.getItem('topologyEndpoints'));\n      var topoEndpoint = endpointComps ? JSON.parse(endpointComps) : [];\n      config = topoEndpoint[params.index];\n    } else if (params.type === TopologyType.TOPOLOGY_INSTANCE) {\n      var instanceComps = \"\".concat(window.localStorage.getItem('topologyInstances'));\n      var topoInstance = instanceComps ? JSON.parse(instanceComps) : [];\n      config = topoInstance[params.index];\n    } else {\n      config = tree[context.state.group].children[context.state.current].children[params.index];\n    }\n\n    if (!config) {\n      return;\n    }\n\n    if (!config.metricName) {\n      return;\n    } // remove the space at the beginning and end of the string\n\n\n    var metricNames = config.metricName.split(',').map(function (item) {\n      return item.replace(/^\\s*|\\s*$/g, '');\n    });\n    var labelsIndex = (config.labelsIndex || '').split(',').map(function (item) {\n      return item.replace(/^\\s*|\\s*$/g, '');\n    });\n    var currentServiceId = config.independentSelector ? config.currentService : currentService.label;\n    var currentInstanceId = config.independentSelector ? config.currentInstance : currentInstance.label;\n    var currentEndpointId = config.independentSelector ? config.currentEndpoint : currentEndpoint.label;\n    var currentDatabaseId = config.independentSelector ? config.currentDatabase : currentDatabase.label;\n    var labels = config.metricType === 'LABELED_VALUE' ? labelsIndex : undefined;\n    var variablesList = metricNames.map(function (name) {\n      var variables = {};\n\n      if (config.entityType === 'All') {\n        variables = names.includes(config.queryMetricType) ? {\n          duration: params.duration,\n          condition: {\n            name: name,\n            parentService: null,\n            normal: true,\n            scope: config.entityType,\n            topN: 10,\n            order: config.sortOrder || 'DES'\n          }\n        } : {\n          duration: params.duration,\n          condition: {\n            name: name,\n            entity: {\n              scope: config.entityType,\n              normal: true\n            }\n          },\n          labels: labels\n        };\n      } else {\n        if (names.includes(config.queryMetricType)) {\n          var parentService = normal ? currentServiceId : currentDatabaseId;\n\n          if (config.parentService && !parentService) {\n            return;\n          }\n\n          variables = {\n            duration: params.duration,\n            condition: {\n              name: name,\n              parentService: config.parentService ? parentService : null,\n              normal: normal,\n              scope: normal ? config.entityType : config.parentService ? 'Service' : config.entityType,\n              topN: 10,\n              order: config.sortOrder || 'DES'\n            }\n          };\n        } else {\n          var serviceName = normal ? currentServiceId : currentDatabaseId;\n\n          if (!serviceName) {\n            return null;\n          }\n\n          if (config.entityType === 'ServiceInstance' && !currentInstanceId) {\n            return null;\n          }\n\n          if (config.entityType === 'Endpoint' && !currentEndpointId) {\n            return null;\n          }\n\n          variables = {\n            duration: params.duration,\n            condition: {\n              name: name,\n              entity: {\n                scope: normal ? config.entityType : 'Service',\n                serviceName: serviceName,\n                serviceInstanceName: config.entityType === 'ServiceInstance' ? currentInstanceId : undefined,\n                endpointName: config.entityType === 'Endpoint' ? currentEndpointId : undefined,\n                normal: normal\n              }\n            },\n            labels: labels\n          };\n        }\n      }\n\n      return variables;\n    });\n    var globalArr = fragmentAll;\n\n    if (!config.queryMetricType || !variablesList.length) {\n      return;\n    }\n\n    var fragments = globalArr[config.queryMetricType].fragment;\n    var queryVariables = globalArr[config.queryMetricType].variable;\n    var query = \"query queryData(\".concat(queryVariables, \") {\").concat(fragments, \"}\");\n    return _Promise.all(variablesList.map(function (variable) {\n      if (variable) {\n        return axios.post('/graphql', {\n          query: query,\n          variables: variable\n        }, {\n          cancelToken: cancelToken()\n        }).then(function (res) {\n          var resData = res.data.data;\n          return _objectSpread({}, resData, {\n            config: config,\n            metricName: variable.condition.name\n          });\n        });\n      } else {\n        return {\n          config: config\n        };\n      }\n    })).then(function (data) {\n      return data;\n    });\n  }\n};\nexport default {\n  actions: actions\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/dashboard/dashboard-data-query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Commit, ActionTree, Dispatch } from 'vuex';\nimport axios, { AxiosPromise, AxiosResponse } from 'axios';\nimport { cancelToken } from '@/utils/cancelToken';\nimport { State } from './dashboard-data';\nimport fragmentAll from './constant-metrics-query';\n\nexport enum TopologyType {\n  TOPOLOGY_ENDPOINT = 'TOPOLOGY_ENDPOINT',\n  TOPOLOGY_INSTANCE = 'TOPOLOGY_INSTANCE',\n}\n\n// actions\nconst actions: ActionTree<State, any> = {\n  GET_QUERY(\n    context: { commit: Commit; dispatch: Dispatch; getters: any; state: State; rootState: any },\n    params: {\n      index: number;\n      duration: any;\n      type: string;\n    },\n  ) {\n    const { currentDatabase, currentEndpoint, currentInstance, currentService } = context.rootState.rocketOption;\n    const dashboard: string = `${window.localStorage.getItem('dashboard')}`;\n    const tree = dashboard ? JSON.parse(dashboard) : context.state.tree;\n    const normal = params.type ? true : tree[context.state.group].type === 'database' ? false : true;\n    let config = {} as any;\n    const names = ['readSampledRecords', 'sortMetrics'];\n\n    if (params.type === TopologyType.TOPOLOGY_ENDPOINT) {\n      const endpointComps: string = `${window.localStorage.getItem('topologyEndpoints')}`;\n      const topoEndpoint = endpointComps ? JSON.parse(endpointComps) : [];\n      config = topoEndpoint[params.index];\n    } else if (params.type === TopologyType.TOPOLOGY_INSTANCE) {\n      const instanceComps: string = `${window.localStorage.getItem('topologyInstances')}`;\n      const topoInstance = instanceComps ? JSON.parse(instanceComps) : [];\n      config = topoInstance[params.index];\n    } else {\n      config = tree[context.state.group].children[context.state.current].children[params.index];\n    }\n    if (!config) {\n      return;\n    }\n    if (!config.metricName) {\n      return;\n    }\n    // remove the space at the beginning and end of the string\n    const metricNames = config.metricName.split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n    const labelsIndex = (config.labelsIndex || '').split(',').map((item: string) => item.replace(/^\\s*|\\s*$/g, ''));\n    const currentServiceId = config.independentSelector ? config.currentService : currentService.label;\n    const currentInstanceId = config.independentSelector ? config.currentInstance : currentInstance.label;\n    const currentEndpointId = config.independentSelector ? config.currentEndpoint : currentEndpoint.label;\n    const currentDatabaseId = config.independentSelector ? config.currentDatabase : currentDatabase.label;\n    const labels = config.metricType === 'LABELED_VALUE' ? labelsIndex : undefined;\n    const variablesList = metricNames.map((name: string) => {\n      let variables = {} as any;\n\n      if (config.entityType === 'All') {\n        variables = names.includes(config.queryMetricType)\n          ? {\n              duration: params.duration,\n              condition: {\n                name,\n                parentService: null,\n                normal: true,\n                scope: config.entityType,\n                topN: 10,\n                order: config.sortOrder || 'DES',\n              },\n            }\n          : {\n              duration: params.duration,\n              condition: {\n                name,\n                entity: {\n                  scope: config.entityType,\n                  normal: true,\n                },\n              },\n              labels,\n            };\n      } else {\n        if (names.includes(config.queryMetricType)) {\n          const parentService = normal ? currentServiceId : currentDatabaseId;\n\n          if (config.parentService && !parentService) {\n            return;\n          }\n          variables = {\n            duration: params.duration,\n            condition: {\n              name,\n              parentService: config.parentService ? parentService : null,\n              normal,\n              scope: normal ? config.entityType : config.parentService ? 'Service' : config.entityType,\n              topN: 10,\n              order: config.sortOrder || 'DES',\n            },\n          };\n        } else {\n          const serviceName = normal ? currentServiceId : currentDatabaseId;\n          if (!serviceName) {\n            return null;\n          }\n          if (config.entityType === 'ServiceInstance' && !currentInstanceId) {\n            return null;\n          }\n          if (config.entityType === 'Endpoint' && !currentEndpointId) {\n            return null;\n          }\n          variables = {\n            duration: params.duration,\n            condition: {\n              name,\n              entity: {\n                scope: normal ? config.entityType : 'Service',\n                serviceName,\n                serviceInstanceName: config.entityType === 'ServiceInstance' ? currentInstanceId : undefined,\n                endpointName: config.entityType === 'Endpoint' ? currentEndpointId : undefined,\n                normal,\n                // destNormal: normal,\n                // destServiceName: '',\n                // destServiceInstanceName: '',\n                // destEndpointName: '',\n              },\n            },\n            labels,\n          };\n        }\n      }\n\n      return variables;\n    });\n\n    const globalArr: any = fragmentAll;\n    if (!config.queryMetricType || !variablesList.length) {\n      return;\n    }\n    const fragments = globalArr[config.queryMetricType].fragment;\n    const queryVariables = globalArr[config.queryMetricType].variable;\n    const query = `query queryData(${queryVariables}) {${fragments}}`;\n\n    return Promise.all(\n      variablesList.map((variable: any) => {\n        if (variable) {\n          return axios\n            .post('/graphql', { query, variables: variable }, { cancelToken: cancelToken() })\n            .then((res: AxiosResponse<any>) => {\n              const resData = res.data.data;\n\n              return { ...resData, config, metricName: variable.condition.name };\n            });\n        } else {\n          return { config };\n        }\n      }),\n    ).then((data: any) => {\n      return data;\n    });\n  },\n};\n\nexport default {\n  actions,\n};\n"],"sourceRoot":""}]}