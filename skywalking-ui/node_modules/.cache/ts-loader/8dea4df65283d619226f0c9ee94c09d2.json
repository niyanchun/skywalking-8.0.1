{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/readFile.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/readFile.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Promise from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/promise\";\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var readFile = function readFile(event) {\n  return new _Promise(function (resolve) {\n    var files = event.target.files;\n\n    if (files.length < 1) {\n      return;\n    }\n\n    var file = files[0];\n    var reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onload = function () {\n      if (typeof this.result === 'string') {\n        resolve(JSON.parse(this.result));\n      }\n    };\n  });\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/readFile.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAC,KAAD,EAAe;AACrC,SAAO,aAAY,UAAC,OAAD,EAAY;AAAA,QACrB,KADqB,GACX,KAAK,CAAC,MADK,CACrB,KADqB;;AAE7B,QAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACD;;AACD,QAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;AACA,QAAM,MAAM,GAAe,IAAI,UAAJ,EAA3B;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB;;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,YAAA;AACd,UAAI,OAAO,KAAK,MAAZ,KAAuB,QAA3B,EAAqC;AACnC,QAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,KAAK,MAAhB,CAAD,CAAP;AACD;AACF,KAJD;AAKD,GAbM,CAAP;AAcD,CAfM","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const readFile = (event: any) => {\n  return new Promise((resolve) => {\n    const { files } = event.target;\n    if (files.length < 1) {\n      return;\n    }\n    const file = files[0];\n    const reader: FileReader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = function() {\n      if (typeof this.result === 'string') {\n        resolve(JSON.parse(this.result));\n      }\n    };\n  });\n};\n"],"sourceRoot":""}]}