{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/graph/fragments/topology.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/graph/fragments/topology.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TopoServiceInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: \"\\n    getResponseTimeTrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_server_resp_time\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getThroughputTrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_server_cpm\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getSLATrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_server_call_sla\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getPercentile: getMultipleLinearIntValues(metric: {\\n      name: \\\"service_relation_server_percentile\\\",\\n      id: $id\\n    }, numOfLinear: 5, duration: $duration) { values { value } }\\n\"\n};\nexport var TopoClientInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: \"\\n    getResponseTimeTrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_client_resp_time\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getThroughputTrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_client_cpm\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getSLATrend: getLinearIntValues(metric: {\\n      name: \\\"service_relation_client_call_sla\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getPercentile: getMultipleLinearIntValues(metric: {\\n      name: \\\"service_relation_client_percentile\\\",\\n      id: $id\\n    }, numOfLinear: 5, duration: $duration) { values { value } }\\n\"\n};\nexport var TopoInstanceClientInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: \"\\n    getResponseTimeTrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_client_resp_time\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getThroughputTrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_client_cpm\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getSLATrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_client_call_sla\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getPercentile: getMultipleLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_client_percentile\\\",\\n      id: $id\\n    }, numOfLinear: 5, duration: $duration) { values { value } }\\n\"\n};\nexport var TopoInstanceServerInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: \"\\n    getResponseTimeTrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_server_resp_time\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getThroughputTrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_server_cpm\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getSLATrend: getLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_server_call_sla\\\"\\n      id: $id\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    getPercentile: getMultipleLinearIntValues(metric: {\\n      name: \\\"service_instance_relation_client_percentile\\\",\\n      id: $id\\n    }, numOfLinear: 5, duration: $duration) { values { value } }\\n\"\n};\nexport var TopoInstanceDependency = {\n  variable: '$clientServiceId: ID!, $serverServiceId: ID!, $duration: Duration!',\n  query: \"\\n  topo: getServiceInstanceTopology(clientServiceId: $clientServiceId,\\n    serverServiceId: $serverServiceId, duration: $duration) {\\n    nodes {\\n      id\\n      name\\n      type\\n      isReal\\n      serviceName\\n      serviceId\\n    }\\n    calls {\\n      id\\n      source\\n      detectPoints\\n      target\\n    }\\n  }\\n\"\n};\nexport var Topo = {\n  variable: '$duration: Duration!',\n  query: \"\\n  topo: getGlobalTopology(duration: $duration) {\\n    nodes {\\n      id\\n      name\\n      type\\n      isReal\\n    }\\n    calls {\\n      id\\n      source\\n      detectPoints\\n      target\\n    }\\n  }\"\n};\nexport var ServiceTopo = {\n  variable: '$duration: Duration!, $serviceId: ID!',\n  query: \"\\n  topo: getServiceTopology(duration: $duration, serviceId: $serviceId) {\\n    nodes {\\n      id\\n      name\\n      type\\n      isReal\\n    }\\n    calls {\\n      id\\n      source\\n      detectPoints\\n      target\\n    }\\n  }\"\n};\nexport var ServicesTopo = {\n  variable: '$duration: Duration!, $serviceIds: [ID!]!',\n  query: \"\\n  topo: getServicesTopology(duration: $duration, serviceIds: $serviceIds) {\\n    nodes {\\n      id\\n      name\\n      type\\n      isReal\\n    }\\n    calls {\\n      id\\n      source\\n      detectPoints\\n      target\\n    }\\n  }\"\n};\nexport var TopoMetric = {\n  variable: '$ids: [ID!]!',\n  query: \"\\n  sla: getValues(metric: {\\n    name: \\\"service_sla\\\"\\n    ids: $ids\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\\n  nodeCpm: getValues(metric: {\\n    name: \\\"service_cpm\\\"\\n    ids: $ids\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\\n  nodeLatency: getValues(metric: {\\n    name: \\\"service_resp_time\\\"\\n    ids: $ids\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\"\n};\nexport var TopoServiceMetric = {\n  variable: '$idsS: [ID!]!',\n  query: \"\\n  cpmS: getValues(metric: {\\n    name: \\\"service_relation_server_cpm\\\"\\n    ids: $idsS\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\\n  latencyS: getValues(metric: {\\n    name: \\\"service_relation_client_resp_time\\\"\\n    ids: $idsS\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\"\n};\nexport var TopoClientMetric = {\n  variable: '$idsC: [ID!]!',\n  query: \"\\n  cpmC: getValues(metric: {\\n    name: \\\"service_relation_client_cpm\\\"\\n    ids: $idsC\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\\n  latencyC: getValues(metric: {\\n    name: \\\"service_relation_client_resp_time\\\"\\n    ids: $idsC\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\"\n};\nexport var DependencyInstanceServerMetric = {\n  variable: '$duration: Duration!, $idsC: [ID!]!',\n  query: \"\\n  cpmC: getValues(metric: {\\n    name: \\\"service_instance_relation_server_cpm\\\"\\n    ids: $idsC\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\"\n};\nexport var DependencyInstanceClientMetric = {\n  variable: '$duration: Duration!, $idsC: [ID!]!',\n  query: \"\\n  cpmC: getValues(metric: {\\n    name: \\\"service_instance_relation_client_cpm\\\"\\n    ids: $idsC\\n  }, duration: $duration) {\\n    values {\\n      id\\n      value\\n    }\\n  }\"\n};\nexport var TopoServiceDetail = {\n  variable: ['$serviceId: ID!', '$duration: Duration!'],\n  query: \"\\n    servicePercentile: getMultipleLinearIntValues(metric: {\\n      name: \\\"service_percentile\\\"\\n      id: $serviceId\\n    }, numOfLinear: 5, duration: $duration) {\\n      values { value }\\n    }\\n    serviceSLA: getLinearIntValues(metric: {\\n      name: \\\"service_sla\\\"\\n      id: $serviceId\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    serviceThroughput: getLinearIntValues(metric: {\\n      name: \\\"service_cpm\\\"\\n      id: $serviceId\\n    }, duration: $duration) {\\n      values {\\n        value\\n      }\\n    }\\n    serviceResponseTime: getLinearIntValues(metric: {\\n      name: \\\"service_resp_time\\\"\\n      id: $serviceId\\n    }, duration: $duration) {\\n      values {value}\\n    }\\n    serviceApdexScore: getLinearIntValues(metric: {\\n      name: \\\"service_apdex\\\"\\n      id: $serviceId\\n    }, duration: $duration) {\\n      values {value}\\n    }\\n\"\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/graph/fragments/topology.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAM,eAAe,GAAG;AAC7B,EAAA,QAAQ,EAAE,gCADmB;AAE7B,EAAA,KAAK;AAFwB,CAAxB;AAkCP,OAAO,IAAM,cAAc,GAAG;AAC5B,EAAA,QAAQ,EAAE,gCADkB;AAE5B,EAAA,KAAK;AAFuB,CAAvB;AAkCP,OAAO,IAAM,sBAAsB,GAAG;AACpC,EAAA,QAAQ,EAAE,gCAD0B;AAEpC,EAAA,KAAK;AAF+B,CAA/B;AAkCP,OAAO,IAAM,sBAAsB,GAAG;AACpC,EAAA,QAAQ,EAAE,gCAD0B;AAEpC,EAAA,KAAK;AAF+B,CAA/B;AAkCP,OAAO,IAAM,sBAAsB,GAAG;AACpC,EAAA,QAAQ,EAAE,oEAD0B;AAEpC,EAAA,KAAK;AAF+B,CAA/B;AAuBP,OAAO,IAAM,IAAI,GAAG;AAClB,EAAA,QAAQ,EAAE,sBADQ;AAElB,EAAA,KAAK;AAFa,CAAb;AAkBP,OAAO,IAAM,WAAW,GAAG;AACzB,EAAA,QAAQ,EAAE,uCADe;AAEzB,EAAA,KAAK;AAFoB,CAApB;AAkBP,OAAO,IAAM,YAAY,GAAG;AAC1B,EAAA,QAAQ,EAAE,2CADgB;AAE1B,EAAA,KAAK;AAFqB,CAArB;AAkBP,OAAO,IAAM,UAAU,GAAG;AACxB,EAAA,QAAQ,EAAE,cADc;AAExB,EAAA,KAAK;AAFmB,CAAnB;AAgCP,OAAO,IAAM,iBAAiB,GAAG;AAC/B,EAAA,QAAQ,EAAE,eADqB;AAE/B,EAAA,KAAK;AAF0B,CAA1B;AAuBP,OAAO,IAAM,gBAAgB,GAAG;AAC9B,EAAA,QAAQ,EAAE,eADoB;AAE9B,EAAA,KAAK;AAFyB,CAAzB;AAuBP,OAAO,IAAM,8BAA8B,GAAG;AAC5C,EAAA,QAAQ,EAAE,qCADkC;AAE5C,EAAA,KAAK;AAFuC,CAAvC;AAaP,OAAO,IAAM,8BAA8B,GAAG;AAC5C,EAAA,QAAQ,EAAE,qCADkC;AAE5C,EAAA,KAAK;AAFuC,CAAvC;AAaP,OAAO,IAAM,iBAAiB,GAAG;AAC/B,EAAA,QAAQ,EAAE,CAAC,iBAAD,EAAoB,sBAApB,CADqB;AAE/B,EAAA,KAAK;AAF0B,CAA1B","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const TopoServiceInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: `\n    getResponseTimeTrend: getLinearIntValues(metric: {\n      name: \"service_relation_server_resp_time\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getThroughputTrend: getLinearIntValues(metric: {\n      name: \"service_relation_server_cpm\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getSLATrend: getLinearIntValues(metric: {\n      name: \"service_relation_server_call_sla\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getPercentile: getMultipleLinearIntValues(metric: {\n      name: \"service_relation_server_percentile\",\n      id: $id\n    }, numOfLinear: 5, duration: $duration) { values { value } }\n`,\n};\n\nexport const TopoClientInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: `\n    getResponseTimeTrend: getLinearIntValues(metric: {\n      name: \"service_relation_client_resp_time\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getThroughputTrend: getLinearIntValues(metric: {\n      name: \"service_relation_client_cpm\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getSLATrend: getLinearIntValues(metric: {\n      name: \"service_relation_client_call_sla\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getPercentile: getMultipleLinearIntValues(metric: {\n      name: \"service_relation_client_percentile\",\n      id: $id\n    }, numOfLinear: 5, duration: $duration) { values { value } }\n`,\n};\n\nexport const TopoInstanceClientInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: `\n    getResponseTimeTrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_client_resp_time\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getThroughputTrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_client_cpm\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getSLATrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_client_call_sla\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getPercentile: getMultipleLinearIntValues(metric: {\n      name: \"service_instance_relation_client_percentile\",\n      id: $id\n    }, numOfLinear: 5, duration: $duration) { values { value } }\n`,\n};\n\nexport const TopoInstanceServerInfo = {\n  variable: '$duration: Duration!, $id: ID!',\n  query: `\n    getResponseTimeTrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_server_resp_time\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getThroughputTrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_server_cpm\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getSLATrend: getLinearIntValues(metric: {\n      name: \"service_instance_relation_server_call_sla\"\n      id: $id\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    getPercentile: getMultipleLinearIntValues(metric: {\n      name: \"service_instance_relation_client_percentile\",\n      id: $id\n    }, numOfLinear: 5, duration: $duration) { values { value } }\n`,\n};\n\nexport const TopoInstanceDependency = {\n  variable: '$clientServiceId: ID!, $serverServiceId: ID!, $duration: Duration!',\n  query: `\n  topo: getServiceInstanceTopology(clientServiceId: $clientServiceId,\n    serverServiceId: $serverServiceId, duration: $duration) {\n    nodes {\n      id\n      name\n      type\n      isReal\n      serviceName\n      serviceId\n    }\n    calls {\n      id\n      source\n      detectPoints\n      target\n    }\n  }\n`,\n};\n\nexport const Topo = {\n  variable: '$duration: Duration!',\n  query: `\n  topo: getGlobalTopology(duration: $duration) {\n    nodes {\n      id\n      name\n      type\n      isReal\n    }\n    calls {\n      id\n      source\n      detectPoints\n      target\n    }\n  }`,\n};\nexport const ServiceTopo = {\n  variable: '$duration: Duration!, $serviceId: ID!',\n  query: `\n  topo: getServiceTopology(duration: $duration, serviceId: $serviceId) {\n    nodes {\n      id\n      name\n      type\n      isReal\n    }\n    calls {\n      id\n      source\n      detectPoints\n      target\n    }\n  }`,\n};\nexport const ServicesTopo = {\n  variable: '$duration: Duration!, $serviceIds: [ID!]!',\n  query: `\n  topo: getServicesTopology(duration: $duration, serviceIds: $serviceIds) {\n    nodes {\n      id\n      name\n      type\n      isReal\n    }\n    calls {\n      id\n      source\n      detectPoints\n      target\n    }\n  }`,\n};\nexport const TopoMetric = {\n  variable: '$ids: [ID!]!',\n  query: `\n  sla: getValues(metric: {\n    name: \"service_sla\"\n    ids: $ids\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }\n  nodeCpm: getValues(metric: {\n    name: \"service_cpm\"\n    ids: $ids\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }\n  nodeLatency: getValues(metric: {\n    name: \"service_resp_time\"\n    ids: $ids\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }`,\n};\n\nexport const TopoServiceMetric = {\n  variable: '$idsS: [ID!]!',\n  query: `\n  cpmS: getValues(metric: {\n    name: \"service_relation_server_cpm\"\n    ids: $idsS\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }\n  latencyS: getValues(metric: {\n    name: \"service_relation_client_resp_time\"\n    ids: $idsS\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }`,\n};\n\nexport const TopoClientMetric = {\n  variable: '$idsC: [ID!]!',\n  query: `\n  cpmC: getValues(metric: {\n    name: \"service_relation_client_cpm\"\n    ids: $idsC\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }\n  latencyC: getValues(metric: {\n    name: \"service_relation_client_resp_time\"\n    ids: $idsC\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }`,\n};\n\nexport const DependencyInstanceServerMetric = {\n  variable: '$duration: Duration!, $idsC: [ID!]!',\n  query: `\n  cpmC: getValues(metric: {\n    name: \"service_instance_relation_server_cpm\"\n    ids: $idsC\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }`,\n};\nexport const DependencyInstanceClientMetric = {\n  variable: '$duration: Duration!, $idsC: [ID!]!',\n  query: `\n  cpmC: getValues(metric: {\n    name: \"service_instance_relation_client_cpm\"\n    ids: $idsC\n  }, duration: $duration) {\n    values {\n      id\n      value\n    }\n  }`,\n};\nexport const TopoServiceDetail = {\n  variable: ['$serviceId: ID!', '$duration: Duration!'],\n  query: `\n    servicePercentile: getMultipleLinearIntValues(metric: {\n      name: \"service_percentile\"\n      id: $serviceId\n    }, numOfLinear: 5, duration: $duration) {\n      values { value }\n    }\n    serviceSLA: getLinearIntValues(metric: {\n      name: \"service_sla\"\n      id: $serviceId\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    serviceThroughput: getLinearIntValues(metric: {\n      name: \"service_cpm\"\n      id: $serviceId\n    }, duration: $duration) {\n      values {\n        value\n      }\n    }\n    serviceResponseTime: getLinearIntValues(metric: {\n      name: \"service_resp_time\"\n      id: $serviceId\n    }, duration: $duration) {\n      values {value}\n    }\n    serviceApdexScore: getLinearIntValues(metric: {\n      name: \"service_apdex\"\n      id: $serviceId\n    }, duration: $duration) {\n      values {value}\n    }\n`,\n};\n"],"sourceRoot":""}]}