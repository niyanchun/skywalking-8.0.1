{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/timeFormat.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/timeFormat.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar timeFormat = function timeFormat(time) {\n  var step = 'MINUTE';\n  var unix = Math.round(time[1].getTime()) - Math.round(time[0].getTime());\n\n  if (unix <= 60 * 60 * 1000) {\n    step = 'MINUTE';\n  } else if (unix <= 24 * 60 * 60 * 1000) {\n    step = 'HOUR';\n  } else {\n    step = 'DAY';\n  }\n\n  return {\n    start: time[0],\n    end: time[1],\n    step: step\n  };\n};\n\nexport default timeFormat;",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/utils/timeFormat.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,IAAD,EAA2B;AAC5C,MAAI,IAAI,GAAG,QAAX;AACA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,EAAX,IAAgC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,EAAX,CAA7C;;AACA,MAAI,IAAI,IAAI,KAAK,EAAL,GAAU,IAAtB,EAA4B;AAC1B,IAAA,IAAI,GAAG,QAAP;AACD,GAFD,MAEO,IAAI,IAAI,IAAI,KAAK,EAAL,GAAU,EAAV,GAAe,IAA3B,EAAiC;AACtC,IAAA,IAAI,GAAG,MAAP;AACD,GAFM,MAEA;AACL,IAAA,IAAI,GAAG,KAAP;AACD;;AACD,SAAO;AAAE,IAAA,KAAK,EAAE,IAAI,CAAC,CAAD,CAAb;AAAkB,IAAA,GAAG,EAAE,IAAI,CAAC,CAAD,CAA3B;AAAgC,IAAA,IAAI,EAAJ;AAAhC,GAAP;AACD,CAXD;;AAaA,eAAe,UAAf","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Duration } from '@/types/global';\n\nconst timeFormat = (time: Date[]): Duration => {\n  let step = 'MINUTE';\n  const unix = Math.round(time[1].getTime()) - Math.round(time[0].getTime());\n  if (unix <= 60 * 60 * 1000) {\n    step = 'MINUTE';\n  } else if (unix <= 24 * 60 * 60 * 1000) {\n    step = 'HOUR';\n  } else {\n    step = 'DAY';\n  }\n  return { start: time[0], end: time[1], step };\n};\n\nexport default timeFormat;\n"],"sourceRoot":""}]}