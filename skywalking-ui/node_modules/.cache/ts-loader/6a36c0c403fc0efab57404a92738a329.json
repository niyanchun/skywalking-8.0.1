{"remainingRequest":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js??ref--13-3!/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/topology/group/index.ts","dependencies":[{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/topology/group/index.ts","mtime":1592485041000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _defineProperty from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.array.find-index\";\n\nvar _mutations;\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { genID } from '@/utils/genID';\nimport * as types from './mutation-types';\nvar initState = {\n  groupId: 'all',\n  groups: []\n}; // getters\n\nvar getters = {\n  services: function services(state) {\n    if (!state.groups.length) {\n      return [];\n    }\n\n    if (state.groupId === 'all') {\n      return [];\n    }\n\n    var index = state.groups.findIndex(function (i) {\n      return i.id === state.groupId;\n    });\n    return state.groups[index].services;\n  }\n}; // mutations\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, types.INIT_GROUPS, function (state) {\n  var storage = localStorage.getItem('topology-groups');\n\n  if (storage) {\n    state.groups = JSON.parse(storage);\n  } else {\n    state.groups = [];\n  }\n}), _defineProperty(_mutations, types.SAVE_GROUPS, function (state) {\n  localStorage.setItem('topology-groups', _JSON$stringify(state.groups));\n}), _defineProperty(_mutations, types.CREATE_GROUP, function (state, name) {\n  state.groups.push({\n    id: \"\".concat(genID(5)),\n    name: name,\n    services: []\n  });\n  localStorage.setItem('topology-groups', _JSON$stringify(state.groups));\n}), _defineProperty(_mutations, types.DELETE_GROUP, function (state, id) {\n  var index = state.groups.findIndex(function (i) {\n    return i.id === id;\n  });\n\n  if (index === -1) {\n    return;\n  }\n\n  state.groups.splice(index, 1);\n  state.groupId = 'all';\n  localStorage.setItem('topology-groups', _JSON$stringify(state.groups));\n}), _defineProperty(_mutations, types.SELECT_GROUP, function (state, id) {\n  state.groupId = id;\n  localStorage.setItem('topology-group-history', id);\n}), _defineProperty(_mutations, types.UNSELECT_GROUP, function (state) {\n  state.groupId = 'all';\n  localStorage.removeItem('topology-group-history');\n}), _defineProperty(_mutations, types.ADD_GROUP_SERVICE, function (state, data) {\n  var groupIndex = state.groups.findIndex(function (i) {\n    return i.id === data.id;\n  });\n\n  if (groupIndex === -1) {\n    return;\n  }\n\n  var services = state.groups[groupIndex].services;\n  var index = services.findIndex(function (i) {\n    return i.label === data.service.label;\n  });\n\n  if (index === -1) {\n    services.push(data.service);\n  }\n\n  localStorage.setItem('topology-groups', _JSON$stringify(state.groups));\n}), _defineProperty(_mutations, types.DELETE_GROUP_SERVICE, function (state, data) {\n  var groupIndex = state.groups.findIndex(function (i) {\n    return i.id === data.id;\n  });\n\n  if (groupIndex === -1) {\n    return;\n  }\n\n  var services = state.groups[groupIndex].services;\n  var index = services.findIndex(function (i) {\n    return i.label === data.service.label;\n  });\n\n  if (index !== -1) {\n    services.splice(index, 1);\n  }\n\n  localStorage.setItem('topology-groups', _JSON$stringify(state.groups));\n}), _mutations); // actions\n\nvar actions = {};\nexport default {\n  namespaced: true,\n  state: initState,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["/Volumes/Files/Study/apm/apache-skywalking-apm-8.0.1/skywalking-ui/src/store/modules/topology/group/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionTree, MutationTree } from 'vuex';\nimport { genID } from '@/utils/genID';\nimport * as types from './mutation-types';\n\nexport interface Group {\n  id: string;\n  name: string;\n  services: Array<{key: string, label: string}>;\n}\nexport interface State {\n  groupId: string;\n  groups: Group[];\n}\n\nconst initState: State = {\n  groupId: 'all',\n  groups: [],\n};\n\n// getters\nconst getters = {\n  services(state: State) {\n    if (!state.groups.length) {\n      return [];\n    }\n    if (state.groupId === 'all') {\n      return [];\n    }\n    const index = state.groups.findIndex((i: Group) => i.id === state.groupId);\n    return state.groups[index].services;\n  },\n};\n\n// mutations\nconst mutations: MutationTree<State> = {\n  [types.INIT_GROUPS](state: State): void {\n    const storage = localStorage.getItem('topology-groups');\n    if (storage) {\n      state.groups = JSON.parse(storage);\n    } else {\n      state.groups = [];\n    }\n  },\n  [types.SAVE_GROUPS](state: State): void {\n    localStorage.setItem('topology-groups', JSON.stringify(state.groups));\n  },\n  [types.CREATE_GROUP](state: State, name: string): void {\n    state.groups.push({\n      id: `${genID(5)}`,\n      name,\n      services: [],\n    });\n    localStorage.setItem('topology-groups', JSON.stringify(state.groups));\n  },\n  [types.DELETE_GROUP](state: State, id: string): void {\n    const index = state.groups.findIndex((i: Group) => i.id === id);\n    if (index === -1) {\n      return;\n    }\n    state.groups.splice(index, 1);\n    state.groupId = 'all';\n    localStorage.setItem('topology-groups', JSON.stringify(state.groups));\n  },\n  [types.SELECT_GROUP](state: State, id: string): void {\n    state.groupId = id;\n    localStorage.setItem('topology-group-history', id);\n  },\n  [types.UNSELECT_GROUP](state: State): void {\n    state.groupId = 'all';\n    localStorage.removeItem('topology-group-history');\n  },\n  [types.ADD_GROUP_SERVICE](state: State, data: { id: string; service: {label: string, key: string} }): void {\n    const groupIndex = state.groups.findIndex((i: Group) => i.id === data.id);\n    if (groupIndex === -1) {\n      return;\n    }\n    const services = state.groups[groupIndex].services;\n    const index = services.findIndex((i) => i.label === data.service.label);\n    if (index === -1) {\n      services.push(data.service);\n    }\n    localStorage.setItem('topology-groups', JSON.stringify(state.groups));\n  },\n  [types.DELETE_GROUP_SERVICE](state: State, data: { id: string; service: {label: string, key: string} }): void {\n    const groupIndex = state.groups.findIndex((i: Group) => i.id === data.id);\n    if (groupIndex === -1) {\n      return;\n    }\n    const services = state.groups[groupIndex].services;\n    const index = services.findIndex((i) => i.label === data.service.label);\n    if (index !== -1) {\n      services.splice(index, 1);\n    }\n    localStorage.setItem('topology-groups', JSON.stringify(state.groups));\n  },\n};\n\n// actions\nconst actions: ActionTree<State, any> = {};\n\nexport default {\n  namespaced: true,\n  state: initState,\n  getters,\n  actions,\n  mutations,\n};\n"],"sourceRoot":""}]}